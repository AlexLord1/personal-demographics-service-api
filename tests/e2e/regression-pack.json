{
	"info": {
		"_postman_id": "47521062-95eb-4562-a65d-a1f6d0095e91",
		"name": "Personal Demographics Service copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Framwork Setup",
			"item": [
				{
					"name": "checkSearchMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2229b46d-8763-4651-9433-82789579c47a",
								"exec": [
									"/*functions*/\r",
									"var checkSearchMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.entry[0].resource.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Meta version id mapping function\r",
									"pm.test(\"Meta 'versionId' has been mapped correctly\", function () {\r",
									"    console.log(\"expected metaVersionId = \" + (pm.variables.get(\"metaVersionId\")));\r",
									"    console.log(\"returned metaVersionId = \" + (response.entry[0].resource.meta.versionId));\r",
									"    pm.expect(response.entry[0].resource.meta.versionId).to.eql(pm.variables.get(\"metaVersionId\"));\r",
									"    }\r",
									");*/\r",
									"\r",
									"/*Check Name Related items*/\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"suffix\")  === undefined ) {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"    pm.variables.unset(\"suffix\");\r",
									"}\r",
									"\r",
									");\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.entry[0].resource.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"/*Check Address Related items*/\r",
									"\r",
									"/*address line mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('Address is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    // pm.test(\"Address has been mapped correctly\", function () {\r",
									"    //     pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"addressLine\"));\r",
									"    // }\r",
									"    // );\r",
									"\r",
									"    // /*addressPeriodStart mapping function*/\r",
									"    pm.test(\"Address 'periodStart' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].period.start).to.eql((pm.variables.get(\"addressPeriodStart\")));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*addressPostCode mapping function*/\r",
									"    pm.test(\"Address 'PostCode' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    // /*address.use mapping function*/\r",
									"    pm.test(\"Address 'Use' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"    }\r",
									"    );\r",
									"}\r",
									"\r",
									"/*telecom.system mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom is not displayed for Sensitive Patient\", () => {\r",
									"        pm.expect(response.entry[0].resource.telecom).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"Telecom 'System' has been mapped correctly\", function () {\r",
									"        console.log(\"expected telecomType = \" + (pm.variables.get(\"telecomType\")) + \" and should = \" + (response.entry[0].resource.telecom[0].system));\r",
									"        console.log(\"returned telecomSystem = \" + (response.entry[0].resource.telecom[0].system));\r",
									"        if (pm.variables.get(\"telecomType\") == \"telephone\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"phone\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomType\") == \"fax\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"fax\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomType\") == \"textphone\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"pager\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomType\") == \"email\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].system).to.eql(\"email\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"\r",
									"    });\r",
									"\r",
									"    /*telecom.use mapping function*/\r",
									"\r",
									"    pm.test(\"Telecom 'Use' has been mapped correctly\", function () {\r",
									"\r",
									"        if (pm.variables.get(\"telecomUse\") == \"home\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"work\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"work\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"pager\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"mobile\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"mobile\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"mobile\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"temporary\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"temp\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"Answering Machine\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"telecomUse\") == \"Emergency\") {\r",
									"            pm.expect(response.entry[0].resource.telecom[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*telecomPeriodStart mapping function*/\r",
									"    pm.test(\"Telecom 'periodStart' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*telecomValue mapping function*/\r",
									"    pm.test(\"Telecom 'Value' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"    }\r",
									"    );\r",
									"}\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('generalPractitioner is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.generalPractitioner).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"generalPractitioner has been mapped correctly\", function () {\r",
									"        console.log(\"expected generalPractitionerValue = \" + (pm.variables.get(\"\")));\r",
									"        console.log(\"returned generalPractitionerValue = \" + (JSON.stringify(response.entry[0].resource.generalPractitioner)));\r",
									"        var generalPractitionerValueExists = (pm.variables.get(\"generalPractitionerValue\"));\r",
									"        if (!generalPractitionerValueExists) {\r",
									"            console.log(\"if generalPractitionerValue doesnt exist then there should be no generalPractice returned = \" + response.entry[0].resource.generalPractitioner);\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.generalPractitioner)).to.eql(undefined);\r",
									"        }\r",
									"        else if (generalPractitionerValueExists) {\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.system).to.eql(\"https://digital.nhs.uk/services/organisation-data-service\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"        }\r",
									"        pm.variables.unset(\"generalPractitionerValue\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"    });\r",
									"}\r",
									"\r",
									"/*extention items*/\r",
									"\r",
									"/*DeathNotification Items*/\r",
									"\r",
									"/*DeathNotification ValueDateTime mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"DeathNotification is not displayed for a Sensitive patient\", () => {\r",
									"        pm.expect(response.entry[0].resource.extension).to.equal(undefined);\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"DeathNotification has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"deathNotificationValueDateTime\") !== \"\") {\r",
									"            pm.expect((response.entry[0].resource.extension[0].extension[1].valueDateTime).substring(0, 10)).to.eql((pm.variables.get(\"deathNotificationValueDateTime\")));\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"            pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"deathNotificationValueDateTime\") === \"\") {\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.extension)).to.eql(undefined);\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"meta security object has been mapped correctly\", () => {\r",
									"    if (pm.variables.get('security.code')) {\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].code).to.equal(pm.variables.get('security.code'));\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"    \r",
									"    pm.variables.unset('security.code');\r",
									"});\r",
									"\r",
									"};\r",
									"\r",
									"pm.globals.set(\"checkSearchMappings\", checkSearchMappings.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "380cc7a6-3e30-4be7-a3c0-70e653664245",
								"exec": [
									"/*CreatePatient Function*/",
									"",
									"var createPatient = () => {",
									"",
									"function createPatient() {",
									"    ",
									"    /*create a random firstname*/",
									"    let given = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
									"    pm.variables.set(\"given\", given);",
									"    console.log(\"Random 'Given' name created is: \" + pm.variables.get(\"given\"));",
									"    ",
									"    /*create a random lastname*/",
									"    let family = pm.variables.replaceIn(\"{{$randomLastName}}\");",
									"    pm.variables.set(\"family\", family);",
									"    console.log(\"Random 'family' name created is: \" + pm.variables.get(\"family\"));",
									"    ",
									"    /*create a random houseNumber*/",
									"    let addressHouseNumber = pm.variables.replaceIn(\"{{$randomInt}}\");",
									"    pm.variables.set(\"addressHouseNumber\", addressHouseNumber);",
									"    console.log(\"Random 'houseNumber' created is: \" + pm.variables.get(\"addressHouseNumber\"));",
									"    ",
									"    /*create a random Street*/",
									"    let addressStreet = pm.variables.replaceIn(\"{{$randomStreetName}}\");",
									"    pm.variables.set(\"addressStreet\", addressStreet);",
									"    console.log(\"Random 'addressStreet' created is: \" + pm.variables.get(\"addressStreet\"));",
									"    ",
									"    /*create a random District*/",
									"    let addressDistrict = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" District\";",
									"    pm.variables.set(\"addressDistrict\", addressDistrict);",
									"    console.log(\"Random 'addressDistrict' created is: \" + pm.variables.get(\"addressDistrict\"));",
									"    ",
									"    /*create a random City*/",
									"    let addressCity = pm.variables.replaceIn(\"{{$randomCity}}\");",
									"    pm.variables.set(\"addressCity\", addressCity);",
									"    console.log(\"Random 'addressCity' created is: \" + pm.variables.get(\"addressCity\"));",
									"    ",
									"    /*create a random County*/",
									"    let addressCounty = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" County\";",
									"    pm.variables.set(\"addressCounty\", addressCounty);",
									"    console.log(\"Random 'addressCounty' created is: \" + pm.variables.get(\"addressCounty\"));",
									"    ",
									"    /*create a random postCode*/",
									"    pm.variables.set(\"postCode\", \"PD12\" + _.random(1,9) + \"PD\");",
									"    console.log(\"Random 'postCode' created is: \" + pm.variables.get(\"postCode\"));",
									"    ",
									"    /*create a random gender*/",
									"    pm.variables.set(\"gender\", _.random(1,2));",
									"    console.log(\"Random 'gender' created is: \" + pm.variables.get(\"gender\"));",
									"    ",
									"    /*create a random birthDate*/",
									"    var moment = require('moment');",
									"    let randomYears = _.random(10,50);",
									"    pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));",
									"    pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));",
									"    console.log(\"Random 'birthTime' created is: \" + pm.variables.get(\"birthTime\"));",
									"    console.log(\"Random 'birthDate' created is: \" + pm.variables.get(\"birthDate\"));",
									"}",
									"};",
									"pm.globals.set(\"createPatient\", createPatient.toString());",
									"",
									"  ",
									"  ",
									"  ",
									"  ",
									"  ",
									"  ",
									" ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "This function creates a patient made up of randomised variables, consiting of: \n\n- given name\n- family name\n- address lines (5 lines in total)\n- postcode\n- gender\n- birthdate\n\nit can be used to create a Patient using the Personal Demographics service - HL7 V3 API"
					},
					"response": []
				},
				{
					"name": "FHIR Error Reponse Validator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bee4bd0-e60b-4c3f-a581-4a21b41c9449",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "615f80a7-2e3e-424e-b794-12de7f82dfa7",
								"exec": [
									"// Error Message Validation: Provides tests to assert against FHIR error response",
									"",
									"pm.globals.set('errorMessage', function errorMessage() {",
									"    let response = pm.response.json();",
									"    let message = {};",
									"",
									"    message.assertCodeIs = (code) => {",
									"        pm.test(\"Returns the code \" + code, () => {",
									"            pm.expect(response.issue[0].details.coding[0].code).to.eql(code);",
									"        });",
									"    }",
									"",
									"    message.assertDisplayIs = (display) => {",
									"        pm.test(\"Returns the display message \" + display, () => {",
									"            pm.expect(response.issue[0].details.coding[0].display).to.eql(display);",
									"        });",
									"    }",
									"",
									"    message.assertSeverityIs = (severity) => {",
									"        pm.test(\"Returns the severity \" + severity, () => {",
									"            pm.expect(response.issue[0].severity).to.eql(severity);",
									"        });",
									"    }",
									"",
									"    message.assertSystemIs = (system) => {",
									"        pm.test(\"Returns the system message \" + system, () => {",
									"            pm.expect(response.issue[0].details.coding[0].system).to.eql(system);",
									"        });",
									"    }",
									"",
									"    return message;",
									"} + '; errorMessage();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "# Function: FHIR Error Response Validator\n___\n### Description\nThis function provides the capability to assert aspects of the generic FHIR based error response matches expectation.\n \n##### Example FHIR Error Response\n```\n{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}\n```\n\n### Usage\nUse eval to evaluate the function, which is stored as the global variable _errorMessage_\n```\neval(pm.globals.get(\"errorMessage\"));\n```\nCall the various different internal 'methods' to assert against key parts of the error message\n```\nerrorMessage().assertCodeIs(\"EXTRA_VALUE\");\nerrorMessage().assertDisplayIs(\"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\");\nerrorMessage().assertSeverityIs(\"error\");\nerrorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\n```\n\n### Output\n- PASS Returns the code EXTRA_VALUE\n- PASS Returns the display message Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\n- PASS Returns the severity error\n- PASS Returns the system message https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode"
					},
					"response": []
				},
				{
					"name": "Patient Validator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6517a43-225a-408e-b4a7-960fb65c640d",
								"exec": [
									"// Patient Utility: Provides key patient response related functions",
									"pm.globals.set('patient', function patient() {",
									"    let response = pm.response.json();",
									"    let calls = {};",
									"",
									"    calls.getScores = () => {",
									"        var scores = [];",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            scores.push(response.entry[i].search.score);",
									"        }",
									"",
									"        return scores;",
									"    };",
									"",
									"    calls.getTotalNumberOfPatients = () => {",
									"        let response = JSON.parse(responseBody);",
									"        return response.total;",
									"    };",
									"    ",
									"    calls.containsPatientWithNhsNumber = function(nhsNumber) {",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            if(response.entry[i].resource.id === nhsNumber) {",
									"                return true;",
									"            }",
									"        }",
									"",
									"        return false;",
									"    };",
									"    ",
									"    calls.getScoreByNhsNumber = function(resp, nhsNumber) {",
									"        console.log(\"HERE: \" + resp);",
									"        for (i = 0; i < resp.entry.length; i++) {",
									"            if (resp.entry[i].resource.id === nhsNumber) {",
									"                return resp.entry[i].search.score;",
									"            }",
									"        }",
									"",
									"        return null;",
									"    };",
									"",
									"    return calls;",
									"} + '; patient();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Response Assertions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3912b1b6-4b27-4442-a94b-4f0176655023",
								"exec": [
									"// Assert utility: Tests for key aspects of the response",
									"pm.globals.set(\"assertThatUtil\", function assertThatUtil() {",
									"    let response = pm.response.json();",
									"    let util = {};",
									"",
									"    util.statusCodeIs = (code) => {",
									"        pm.test(\"Returns status code \" + code, () => {                    ",
									"            pm.response.to.have.status(code);            ",
									"        });",
									"",
									"    };",
									"",
									"    util.responseContainsHeader = (headerName, headerValue) => {",
									"        pm.test(\"Response contains header \" + headerName + \" with value \" + headerValue, () =>{",
									"            pm.response.to.have.header(headerName);",
									"            pm.expect(postman.getResponseHeader(headerName)).to.equal(headerValue);",
									"        });",
									"    };",
									"",
									"    return util;",
									"} + '; assertThatUtil();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkRetrieveMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96d51450-1277-4844-883c-7af4aa143dd8",
								"exec": [
									"var checkRetrieveMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    pm.expect(response.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    \r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"prefix\") === undefined) {\r",
									"        pm.expect(response.name[0].prefix).to.eql(undefined);\r",
									"    } else {\r",
									"        pm.expect(response.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"prefix\");\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"suffix\")) {\r",
									"        pm.expect(response.name[0].suffix).to.equal(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"// Check Meta.Security object is displayed for Sensitive Patients\r",
									"pm.test(\"Security object has been mapped correctly\", () => {\r",
									"    let securityCode = pm.variables.get(\"securityCode\");\r",
									"\r",
									"    if (securityCode) {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('R');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"});\r",
									"\r",
									"// Check deathNotificationExtension\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"deathNotificationStatus extension has been mapped correctly -  Only checked for a Sensitive Patient\", () => {\r",
									"        pm.expect(response.extension[0].extension[0].url).to.equal('deathNotificationStatus');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.equal('1', 'invalid code');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.equal(pm.variables.get(\"deathNotificationStatus.display\"));\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus', 'invalid system');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.equal('1.0.0', 'invalid version');\r",
									"    });\r",
									"}\r",
									"\r",
									"/*Check Address Related items*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Address for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Address has been mapped correctly\", function () {\r",
									"        let expectedValue;\r",
									"        switch (pm.variables.get(\"addressType\")) {\r",
									"            case 'usual':\r",
									"                expectedValue = 'home';\r",
									"                break;\r",
									"            case 'work':\r",
									"                expectedValue = 'work';\r",
									"                break;\r",
									"            case 'correspondence':\r",
									"                expectedValue = 'billing';\r",
									"                break;\r",
									"            case 'temporary':\r",
									"                expectedValue = 'temp';\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect.fail(\"addressType mapped incorrectly\");\r",
									"        }\r",
									"\r",
									"        pm.expect(response.address[0].use).to.eql(expectedValue, \"invalid addressType\");\r",
									"        // pm.expect(JSON.stringify(response.address[0].line)).to.eql(pm.variables.get(\"addressLine\"), \"invalud addressLine\");\r",
									"        pm.expect(response.address[0].period.start).to.eql(pm.variables.get(\"addressPeriodStart\"), \"invalid addressPeriodStart\");\r",
									"        pm.expect(response.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"), \"invalid postalCode\");\r",
									"\r",
									"        let addressPeriodEnd = pm.variables.get(\"addressPeriodEnd\") === undefined ? undefined : pm.variables.get(\"addressPeriodEnd\");\r",
									"        pm.expect(response.address[0].period.end).to.eql(addressPeriodEnd, \"invalid addressPeriodEnd\");\r",
									"    });\r",
									"    \r",
									"    pm.variables.unset(\"addressPeriodEnd\");\r",
									"}\r",
									"\r",
									"/*telecom mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.telecom).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Telecom has been mapped correctly\", function () {\r",
									"        let telecomType;\r",
									"        if (pm.variables.get(\"telecomType\")) {\r",
									"            switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                case 'telephone':\r",
									"                    telecomType = \"phone\";\r",
									"                    break;\r",
									"                case 'fax':\r",
									"                case 'email':\r",
									"                    telecomType = pm.variables.get(\"telecomType\");\r",
									"                    break;\r",
									"                case 'textphone':\r",
									"                    telecomType = \"pager\";\r",
									"                    break;\r",
									"                default:\r",
									"                    pm.expect.fail(\"telecomType mapping failure\");\r",
									"                    break;\r",
									"            }\r",
									"            pm.expect(response.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\r",
									"            let telecomUse;\r",
									"            switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                case 'home':\r",
									"                case 'answering machine':\r",
									"                case 'emergency':\r",
									"                    telecomUse = \"home\";\r",
									"                    break;\r",
									"                case 'work':\r",
									"                case 'mobile':\r",
									"                    telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                    break;\r",
									"                case 'pager':\r",
									"                    telecomUse = \"mobile\";\r",
									"                    break;\r",
									"                case 'temporary':\r",
									"                    telecomUse = \"temp\";\r",
									"                    break;\r",
									"            }\r",
									"\r",
									"            pm.expect(response.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"            pm.expect(response.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"            pm.expect(response.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"        }\r",
									"        else {\r",
									"            pm.expect(response.telecom).to.eql(undefined);\r",
									"        }\r",
									"    })\r",
									"\r",
									"    pm.variables.unset(\"telecomType\");\r",
									"    pm.variables.unset(\"telecomUse\");\r",
									"};\r",
									"\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"pm.test(\"GeneralPractitioner has been mapped correctly\", () => {\r",
									"    if (pm.variables.get(\"s-flagged\") || !pm.variables.get(\"generalPractitionerValue\")) {\r",
									"        console.log(\"this is a sensitive patient or the generalPractitionerValue has not been set therefore generalPractice should not be returned\");\r",
									"        pm.expect(response.generalPractitioner).to.be.undefined;\r",
									"    } else {\r",
									"        console.log(\"generalPractitionerValue has been set for the patient so generalPractitionerValue should be returned\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.system).to.eql(\"https://digital.nhs.uk/services/organisation-data-service\");\r",
									"        pm.expect(response.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"generalPractitionerValue\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"});\r",
									"\r",
									"/*nominatedPharmacy mapping function*/\r",
									"pm.test(\"nominatedPharmacy has been mapped correctly\", function () {\r",
									"    let nominatedPharmacyExists = (pm.environment.get(\"nominatedPharmacy\"));\r",
									"    let nominatedPharmacyExtension = response.extension === undefined ? undefined : getNominatedPharmacy(response.extension);\r",
									"\r",
									"    if (!nominatedPharmacyExists) {\r",
									"        pm.expect(nominatedPharmacyExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"nominatedPharmacy has been set for the patient so nominatedPharmacy should be returned\");\r",
									"        pm.expect(nominatedPharmacyExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.period.start).to.eql(pm.environment.get(\"nominatedPharmacyPeriodStart\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.period.end).to.eql(pm.environment.get(\"nominatedPharmacyPeriodEnd\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.value).to.eql(pm.environment.get(\"nominatedPharmacy\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.environment.get(\"nominatedPharmacy\")));\r",
									"    }\r",
									"\r",
									"    pm.environment.unset(\"nominatedPharmacy\");\r",
									"    pm.environment.unset(\"nominatedPharmacyPeriodStart\");\r",
									"    pm.environment.unset(\"nominatedPharmacyPeriodEnd\");\r",
									"});\r",
									"\r",
									"\r",
									"/*dispensingDoctor mapping function*/\r",
									"pm.test(\"dispensingDoctor has been mapped correctly\", function () {\r",
									"    let dispensingDoctorExtension = response.extension === undefined ? undefined : getDispensingDoctor(response.extension);\r",
									"    let dispensingDoctorExists = pm.variables.get(\"dispensingDoctor\");\r",
									"\r",
									"    if (!dispensingDoctorExists) {\r",
									"        pm.expect(dispensingDoctorExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"dispensingDoctor has been set for the patient so dispensingDoctor should be returned\");\r",
									"        pm.expect(dispensingDoctorExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"dispensingDoctor\"));\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"dispensingDoctor\")));\r",
									"    }\r",
									"    pm.variables.unset(\"dispensingDoctor\");\r",
									"});\r",
									"\r",
									"/*medicalApplianceSupplier mapping function*/\r",
									"pm.test(\"medicalApplianceSupplier has been mapped correctly\", function () {\r",
									"    let medicalApplianceSupplierExtension = response.extension === undefined ? undefined : getMedicalApplianceSupplier(response.extension);\r",
									"    let medicalApplianceSupplierExists = pm.variables.get(\"medicalApplianceSupplier\");\r",
									"\r",
									"    if (!medicalApplianceSupplierExists) {\r",
									"        pm.expect(medicalApplianceSupplierExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"medicalApplianceSupplier has been set for the patient so medicalApplianceSupplier should be returned\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"medicalApplianceSupplier\"));\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"medicalApplianceSupplier\")));\r",
									"    }\r",
									"    pm.variables.unset(\"medicalApplianceSupplier\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"language Extention has been mapped correctly\", () => {\r",
									"    let languageExtension = response.extension === undefined ? undefined : getLanguageExtention(response.extension);\r",
									"    let language = pm.variables.get(\"language\");\r",
									"\r",
									"    if (!language) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"language\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"languageDisplay\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"interpreter\"));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"language\");\r",
									"    pm.variables.unset(\"languageDisplay\");\r",
									"    pm.variables.unset(\"interpreter\");\r",
									"\r",
									"});\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    for (let extensions of response.extension) {\r",
									"        try {\r",
									"                for (let e of extensions.extension) {\r",
									"                    if (e.url == \"language\") {\r",
									"                    console.log(e);\r",
									"                    return extensions;\r",
									"                    }       \r",
									"                 }\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"}\r",
									"\r",
									"\r",
									"function getNominatedPharmacy(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/ExtensionUKCore-NominatedPharmacy\") {\r",
									"\t\t\t\t\t\tconsole.log(\"nominatedPharmacyExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"function getDispensingDoctor(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\") {\r",
									"\t\t\t\t\t\tconsole.log(\"dispensingDoctorExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"function getMedicalApplianceSupplier(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"\t\t\t\t\t\tconsole.log(\"medicalApplianceSupplierExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"};       \r",
									"\r",
									"pm.variables.set(\"s-flagged\",false);\r",
									"pm.globals.set(\"checkRetrieveMappings\", checkRetrieveMappings.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Search",
					"item": [
						{
							"name": "Simple Search",
							"item": [
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9b6a055-9d92-4930-a63b-a9e7bd39e0f6",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dda0ffe4-dd48-42e9-ab76-36996624878d",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Sensitive Patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bac0e297-f299-41de-a842-b59dbe84ffdb",
												"exec": [
													"/*set variables for test*/",
													"pm.variables.set(\"s-flagged\", true);",
													"",
													"pm.variables.set(\"family\", \"Middleton\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2000-01-01\");",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"pm.variables.set(\"prefix\", \"Baroness\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Cynthia\",\"Cindy\"]);",
													"pm.variables.set(\"suffix\", [\"Brnss\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-31\");",
													"pm.variables.set(\"patientId\", \"5900018512\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"deceasedDateTime\", \"2009-05-01\");",
													"pm.variables.set(\"security.code\", \"R\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2e12386-ba84-4839-8059-f7dfdc8f9557",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"pm.variables.set(\"s-flagged\", false);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "69ef3dc9-0885-4b14-98a8-736740e98242",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Alias\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"1990-10-10\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Dr\");",
													"pm.variables.set(\"nameType\", \"alias\");",
													"pm.variables.set(\"addressType\", \"work\");",
													"pm.variables.set(\"telecomType\", \"fax\");",
													"pm.variables.set(\"telecomUse\", \"work\");",
													"pm.variables.set(\"given\", [\"John\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"bt Global services\",\"1 sovereign Street\",\"leeds\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"postalCode\", \"LS14BT\");",
													"pm.variables.set(\"patientId\", \"5900007820\");",
													"pm.variables.set(\"metaVersionId\", \"21\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"2342424234\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34917883-c5dc-4531-ae78-44bd3aee0589",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7effcefa-9599-40b7-b601-d43e26456f41",
												"exec": [
													"",
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Unknown\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2001-02-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lady\");",
													"pm.variables.set(\"nameType\", \"preferred\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"textphone\");",
													"pm.variables.set(\"telecomUse\", \"pager\");",
													"pm.variables.set(\"given\", [\"person\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 westwood\",\"bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"postalCode\", undefined);",
													"pm.variables.set(\"patientId\", \"5900007073\");",
													"pm.variables.set(\"metaVersionId\", \"4\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d00c322-34d5-4e13-9a9a-2db5418610d0",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"pm.test.skip('Skipping due to current bug', () => {",
													"    eval(pm.globals.get(\"checkSearchMappings\"))();",
													"});    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85206544-87e3-4a44-890a-b988ed833478",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99ae0f0d-cca0-4754-a8e8-68adf111e528",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"previous\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2008-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lord\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"email\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"someone\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"15 westwood ave\",\"eccleshill\",\"Bradford\",\"west yorkshire\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900019241\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd44f020-1114-428f-b5d8-0d262d72f9c9",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "36ebe2b2-d3ae-4b55-829e-e0fdb90be703",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"temporary\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2004-03-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Miss\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"mobile\");",
													"pm.variables.set(\"given\", [\"ned\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900008290\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09000000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77156749-9a43-4e41-adae-ef5cf4a3070e",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7f9175f-74af-4b48-9c96-953c51e45680",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mister\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"2009-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mr\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"temporary\");",
													"",
													"pm.variables.set(\"given\", [\"Any\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900005798\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & DOD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5419ffd9-4247-40a5-9ca7-c878d716dd98",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1ffe3e76-7698-4a0c-a1f3-24a5b0682fcf",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family, DOD & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d2226d4-4492-4a37-9a2e-699a2ed98974",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9aadecf5-cfd8-440e-84d0-276d01b498be",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "339d4db8-bfb3-48fe-ae7f-81137fb43dd7",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fdb3cc5e-b592-4095-93e7-36f64623e182",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Historic Search",
							"item": [
								{
									"name": "Historic Search - search with wildcarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3ddd9d04-518e-4cf3-9180-dd1e4c2f8852",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\",  undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bac1e8d-3568-48a0-b451-f64864ced450",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'family' name will return the patient with current name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7fb6cb7c-c093-42b3-889f-8bf9a9b56bc2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "37c7fbe1-8e96-4f76-8c88-f43c7da8ccb6",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{family}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{family}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given and historic name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1a8b66ef-d512-4c0a-8b67-d05bc9d084b8",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c8a0d02b-1ad2-4bd5-937b-e535e0d4cd5c",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' and 'family' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "70deae5e-343b-496c-ab77-627f17ac8aac",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "29aa1d31-64ca-4198-9458-ac548602a99c",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'family' name will return the patient with current 'family' name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2192034b-e1eb-44b0-bc08-c3bfecea4e25",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "02ce0e25-656f-473a-8458-ad6ac0cac241",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&given={{historicGiven}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "given",
													"value": "{{historicGiven}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildcarded Historic given and family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8293d31c-4a00-4b40-9829-7ff380a94141",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d89c23f7-1fe1-4706-88c6-dd6587f17dc4",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Advanced Search",
							"item": [
								{
									"name": "date range tests",
									"item": [
										{
											"name": "DOD Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOD between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "77a2e549-addb-496c-8083-0c43467f5df2",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3e707691-fd92-4be7-b1c2-2b03b2c825db",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOD falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3383fd8a-844a-44d0-b03a-23aa9d01e662",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "64c7c35a-3cb9-4ff6-b19e-d0683dee4533",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "72a8191f-afc9-4f6e-ab5d-298428fff686",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-02&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "1ba7d080-cae5-41d3-bffb-f6b48321ac8c",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "396bb00f-7bc7-4642-8ee2-246231171516",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-03&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "76604007-b979-4b1f-99bb-c0e7fe1fef86",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c01613d0-1100-496a-803c-c43d9303ab92",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "25270a1a-4127-4604-9967-4586dbb71f8c",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "DOB Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOB between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3d9d6cf2-bcf8-4b0b-9fe9-896da8327b44",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "688381af-fcaa-4c44-9083-fcea320ea177",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d47be060-5d2f-44f2-8612-cc1ee10f6ae7",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "35525595-3cb8-4f38-b23d-ca276c0907b7",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9e3a20b1-3beb-48ac-b6ac-bbdbdd0d1572",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2010-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "bcf013f4-dbdd-4e38-8676-f154d2cfbc1c",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "995c8b76-4bc8-48ae-914d-37bc29366f77",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-02&birthdate=le2011-01-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "53f52780-dc4a-4ef9-848d-06a0977cc3bd",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d6009309-e5bb-43ba-8532-0e562a2fa46d",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2009-12-31\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "dd6b6234-202e-47a6-a780-458872b21266",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "exact-match",
									"item": [
										{
											"name": "All patients are returned when search query matches many patients all with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2c2471a-f2aa-41b6-9d39-7779a3f6ce8f",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns all patients with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    scores.forEach(score => {",
															"        pm.expect(score).to.equal(1);        ",
															"    });",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2020-02-11&family=length&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns all patients from a search which matched multiple patients all with a score =1"
											},
											"response": []
										},
										{
											"name": "Only patients with a score of 1 are returned when search query matches many patients",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5aeafce6-beb7-446b-a85d-229cd79d9aae",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 1 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    pm.expect(scores).to.have.lengthOf(1);",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to true returns only those patients with a score of 1 from a search which matched multiple patients with scores >0 and <=1"
											},
											"response": []
										},
										{
											"name": "0 patients are returned when search query matches 0 patients with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cf7fdafc-a23e-45b5-a79d-63fa1c04adf3",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 0 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "len*"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns 0 patients from a search which matched multiple patients all with a score <1"
											},
											"response": [
												{
													"name": "0 patients returned respose",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_exact-match",
																	"value": "true"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "len*"
																},
																{
																	"key": "gender",
																	"value": "male"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:01:42 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "123"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Etag",
															"value": "\"484cd9e73bb551f9156572bd7c3379a45d286549\""
														}
													],
													"cookie": [],
													"body": "{\n    \"entry\": [],\n    \"resourceType\": \"Bundle\",\n    \"timestamp\": 1582794102,\n    \"total\": 0,\n    \"type\": \"searchset\"\n}"
												}
											]
										},
										{
											"name": "Exact match as false returns all matched patients regardless of score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9ea8f4ef-c2cc-42ba-a19d-e6988bd26218",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"var scores = util.getScores();    ",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 3 patients in total\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(3);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score < 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "de6dcf7e-ea77-4950-91e1-9a9cbaf6f24b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to false returns all patients from a search matching multiple patients with scores > 0 and <=1"
											},
											"response": []
										}
									],
									"description": "Every result includes a score from 0 to 1.\n\nScores less than 1 can happen when parameters supplied do not exactly match the values on the patient record. Results are sorted best-first. You can request to only return exact matches (score = 1) using the _exact-match parameter.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9e07746b-bb5e-4100-b9c5-20f834526834",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "666e3655-a237-40cb-84bd-97f3a4280f39",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "max-results",
									"item": [
										{
											"name": "Search query resulting in >50 patients being matched returns TOO_MANY_MATCHES",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb919365-9f5c-42b4-926e-9a4f0eaf6661",
														"exec": [
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
															"error.assertDisplayIs(\"Too Many Matches\");",
															"error.assertSeverityIs(\"information\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
											},
											"response": [
												{
													"name": "TOO_MANY_MATCHES error message",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "ge2019-02-11"
																},
																{
																	"key": "family",
																	"value": "le*"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Wed, 26 Feb 2020 15:52:24 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "538"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Etag",
															"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										},
										{
											"name": "Search query resulting in more matched patients then max-results value returns TOO_MANY_MATCHES",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "56251673-2c08-4c9e-a617-e154d350da83",
														"exec": [
															"var response = pm.response.json();",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThat.statusCodeIs(200);",
															"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
															"error.assertDisplayIs(\"Too Many Matches\");",
															"error.assertSeverityIs(\"information\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2020-01-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-01-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "Search query which matches more patients then the max-results value returns a *TOO_MANY_MATCHES* error"
											},
											"response": []
										},
										{
											"name": "Empty max_results value returns INVALID_VALUE",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "159c6442-519b-4fe4-875c-e3f3e4ddd006",
														"exec": [
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"errorMessage\"));",
															"",
															"assertThatUtil().statusCodeIs(400);",
															"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
															"errorMessage().assertDisplayIs(\"Invalid value - \\'\\' in field \\'_max-results\\'\");",
															"errorMessage().assertSeverityIs(\"error\");",
															"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": ""
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "Empty (\\' \\') *max-results* value returns a *INVALID_VALUE* error"
											},
											"response": [
												{
													"name": "INVALID_VALUE error response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"value": "200000000610",
																"type": "text"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "1234567890",
																"type": "text"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "1234567890",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": ""
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "le*"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Wed, 26 Feb 2020 15:52:00 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "544"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - '' in field '_max-results'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										}
									],
									"description": "By default, the endpoint will return a maximum of 50 results.\n\nIf there are more than 50 matching patient records, the endpoint will return no results and the error response TOO_MANY_MATCHES. You can choose to limit the number of results returned using the _max-results parameter.",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fuzzy-match",
									"item": [
										{
											"name": "Invalid value in fuzzy_match parameter returns INVALID_VALUE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d9194f61-e2a6-465d-9193-b3651e4170a2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fd1660e8-a52e-498e-8cfd-a247a0c8f7e9",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const error = eval(pm.globals.get(\"errorMessage\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(400);",
															"",
															"error.assertCodeIs(\"INVALID_VALUE\");",
															"error.assertDisplayIs(\"Invalid value - 'test' in field '_fuzzy-match'\");",
															"error.assertSeverityIs(\"error\");",
															"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "test"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting the _fuzzy-match_ value to `test` returns a *INVALID_VALUE* error message "
											},
											"response": [
												{
													"name": "fuzzy-match INVALID_VALUE response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_fuzzy-match",
																	"value": "test"
																},
																{
																	"key": "family",
																	"value": "Stephen"
																},
																{
																	"key": "birthdate",
																	"value": "2015-12-15"
																},
																{
																	"key": "given",
																	"value": "Fuzzy"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:10:09 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "548"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														}
													],
													"cookie": [],
													"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - 'test' in field '_fuzzy-match'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
												}
											]
										},
										{
											"name": "Fuzzy Search handles family name homophone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7f38396b-af0c-49ab-9caf-d8124dd43385",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "71f8a0d2-1d7b-4f4b-9945-e2a678c092cf",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns 3 patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.eql(3);",
															"});",
															"",
															"pm.test(\"Returns both patient Steven and Stephen\", () => {",
															"    let names = getFamilyNameOfAllPatients();",
															"    pm.expect(names).to.contain(\"Steven\");",
															"    pm.expect(names).to.contain(\"Stephen\");",
															"    ",
															"});",
															"",
															"",
															"",
															"// Retrieves the family name of all patients",
															"function getFamilyNameOfAllPatients() {",
															"    var names = [];",
															"",
															"    for(i = 0; i < response.entry.length; i++) {",
															"        names.push(response.entry[i].resource.name[0].family);",
															"    }",
															"",
															"    return names;",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "The search will perform phonetic matching on names using soundex, transpose names, and score the results. If the fields death-date or general-practitioner are provided they will be ignored in this search. This search is performed using a combination of parameters. If an invalid combination is supplied _INVALID_COMBINATION_ will be returned.\n\n- Matching common homophones, such as ‘Smith’ and ‘Smythe’\n- Checking for transposed names, such as ‘Adam Thomas’ and ‘Thomas Adam’\n- Phonetic matching using soundex\n\n",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "result scoring",
									"item": [
										{
											"name": "Search matching criteria exactly returns Patient with score = 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "98836094-b25b-439f-ad3e-da1a4d7c515d",
														"exec": [
															"let response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns 1 patient\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
															"});",
															"",
															"pm.test(\"Returns patient with Nhs Number 5900016528\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900016528');",
															"})",
															"",
															"pm.test(\"Returns score which is a number\", () => {",
															"    pm.expect(response.entry[0].search.score).to.be.a('number');",
															"});",
															"",
															"pm.test(\"Returns patient with score = 1\", () => {",
															"    pm.expect(response.entry[0].search.score).to.equal(1);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family=Toe&given=Mary&gender=male&birthdate=2001-10-10",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "Toe"
														},
														{
															"key": "given",
															"value": "Mary"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2001-10-10"
														}
													]
												},
												"description": "Validate search which matches criteria exactly returns Patient with score of 1"
											},
											"response": []
										},
										{
											"name": "Simple Patient retrieval does not return a matched score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ddefc4b7-f174-470d-a042-fa235df3bf07",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns patient without a scoring\", () =>{",
															"    pm.expect(response).to.not.have.property('search');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient/5900016528",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900016528"
													]
												},
												"description": "Validate a patient retrieve does not return a matched score"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score between 0 and 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6bd4901b-0d7b-4d61-8c29-7f873b0d5f04",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns patients each with a score between 0 and 1\", () =>{",
															"    let scores = patient().getScores();",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.at.least(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "For a wildcard based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Matching score increases when being more specific with Search query parameters",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e9b9a8b-3717-4915-a11c-3b78741ea537",
														"exec": [
															"var response = pm.response.json();",
															"let globalNhsNumber = response.entry[0].resource.id;",
															"let globalScore = response.entry[0].search.score;",
															"let highestScore = globalScore;",
															"",
															"let params = [",
															"    { parameter: \"Post Code\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16 3*'},",
															"    { parameter: \"Family Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16*'},",
															"    { parameter: \"Given Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&given=Selena'},",
															"    { parameter: \"PostCode, Family and Given name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3*&given=Selena'}",
															"]",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            'NHSD-ASID': pm.environment.get(\"from_asid\"),",
															"            'NHSD-Session-URID': pm.environment.get(\"role_id\"),",
															"            'NHSD-Identity-UUID': pm.environment.get(\"user_id\")",
															"        }",
															"    }, function (err, res) {",
															"        let newScore = res.json().entry[0].search.score;",
															"        ",
															"        pm.test(\"Matching score increases when being more specific with \" + p.parameter + \" query parameter(s)\", () => {",
															"            console.log(\"Response for \" + p.parameter + \": \" + JSON.stringify(res.json()));",
															"            pm.expect(globalNhsNumber).to.be.equal(res.json().entry[0].resource.id, 'not the same patient as nhs numbers are different');",
															"            pm.expect(globalScore).to.be.below(newScore);",
															"        });",
															"        ",
															"        if(p.parameter != 'PostCode, Family and Given name') {",
															"            highestScore = newScore > highestScore ? newScore : highestScore;",
															"        } else {",
															"            pm.test(\"Matching score is at it's highest when being more specific with multiple query parameters (PostCode, Family and Given name)\", () => {",
															"                pm.expect(newScore).to.be.above(highestScore);",
															"            })",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2885668e-6052-49e5-881e-946df8e0e2d3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														}
													]
												},
												"description": "Validates that the returned patients score increases when being more specific with the following search query parameters\n- Post Code\n- Family Name\n- Given Name\n- Multiple (Post Code, Family name and Given name)"
											},
											"response": []
										},
										{
											"name": "Fuzzy search returns multiple patients each with a matched score between 0 and 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d2ac7b2f-6658-4051-b740-d9d7eb7bb621",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e0f21472-60e6-49e4-a2a7-5089e9da27fb",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"let scores = patient().getScores();",
															"let numberOfPatients = patient().getTotalNumberOfPatients();",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(numberOfPatients).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Each patient has a score\", () =>{",
															"    pm.expect(numberOfPatients).to.equal(scores.length)",
															"});",
															"",
															"pm.test(\"Each score is a number\", () => {",
															"   scores.forEach(score => {",
															"       pm.expect(score).to.be.a('number');",
															"   }) ",
															"});",
															"",
															"pm.test(\"Each score is between 0 and 1\", () => {",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.above(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For a fuzzy-search based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score sorted by score best-first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1c18f163-aeb7-43d9-8fad-f1d7a3d1a275",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "baecef13-c602-462a-bf7d-86abaacd5e5d",
														"exec": [
															"var chai = require(\"chai\");",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.be.above(1);",
															"});",
															"",
															"pm.test(\"Returns result scoring sorted best-first\", () => {",
															"    let scores = patientUtil.getScores();",
															"    ",
															"    for (i = 1; i < scores.length; i++) {",
															"        let previous = parseFloat(scores[i-1]);",
															"        let current = parseFloat(scores[i]);",
															"        pm.expect(current).to.be.at.most(previous);        ",
															"      }",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For alphanumeric searching, every result includes a score from 0 to 1. \n\nThis test is to validate that\n- Results are sorted best-first i.e. 1 to 0"
											},
											"response": []
										}
									],
									"description": "Every matched patient in the results list includes a score to indicate how closely the patient matched the search parameters. A score of 1.0 indicates an exact match. A score of less than 1.0 indicates a partial match. The result list is sorted in descending score order - best match first.",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "other tests",
									"item": [
										{
											"name": "Multiple Wildcards permitted - family",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887527bb-9850-43a6-80e9-604b62cc1884",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6d34ba91-2fc1-4731-8d65-20b4b970805f",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "general-practitioner",
															"value": "Y0001",
															"disabled": true
														}
													]
												},
												"description": "Multiple wildcards are permitted in family name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - given",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "de4e19b6-bd35-49f5-9b6f-4a36e9801092",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9dfca179-1e9c-4359-a599-f1eb4f2e9203",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in given name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c9ab6e51-f3cd-4690-a4ba-1db162ddaced",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4060421f-c7c9-40c4-99d1-034e037274e4",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in postCode"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - family, given & postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d5b18e58-afcd-4474-ab5d-b05cebedb063",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eb27c353-3b85-4294-8bfa-87ef410cd168",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in family, given & postCode"
											},
											"response": []
										},
										{
											"name": "Search by Postcode ignores whitespacing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ecb0366c-2f25-4cd8-acb5-a685134f051b",
														"exec": [
															"let testScenarios = pm.variables.get('testData');",
															"let asidHeader = pm.variables.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
															"",
															"testScenarios.forEach(scenario => {",
															"    scenario.tests.forEach(testScript => {",
															"        console.log(\"Test Script: \" + testScript.name);",
															"        ",
															"        testScript.tests.forEach(t => {",
															"            let patientDetails;    ",
															"            let needToSetValues = true;",
															"            console.log(\"Query Type: \" + t.searchType);",
															"            ",
															"            pm.sendRequest({",
															"                url: pm.environment.get(\"environment\") + t.query,",
															"                method: 'GET',",
															"                header: {",
															"                    asidHeader,",
															"                    sessionURIDHeader,",
															"                    identityUUIDHeader",
															"                }",
															"            }, function (err, res) {            ",
															"                if (needToSetValues) {",
															"                    patientDetails = getNhsNumberAndInitialScore(res.json());                ",
															"                    needToSetValues = false;",
															"                }",
															"                pm.expect(res.code).to.equal(200, 'invalid response returned');",
															"                validateScoreRemainsTheSame(testScript.name + \" - \" + t.searchType, res.json(), patientDetails);",
															"            });",
															"        })",
															"    });",
															"});",
															"",
															"",
															"",
															"function getNhsNumberAndInitialScore(response) {",
															"    return {",
															"        nhsNumber: response.entry[0].resource.id,",
															"        score: response.entry[0].search.score",
															"    };",
															"}",
															"",
															"function validateScoreRemainsTheSame(testName, response, patientDetails) {",
															"    let newScore = response.entry[0].search.score;",
															"    pm.test(testName + ' returns patient ' + patientDetails.nhsNumber + ' with matching score of ' + newScore, () => {",
															"        pm.expect(response.entry[0].resource.id).to.equal(patientDetails.nhsNumber, \"unexpected patient record returned\");",
															"        console.log(testName + ' NHS Number ' + patientDetails.nhsNumber + ' with Score: ' + newScore);",
															"        pm.expect(patientDetails.score).to.equal(newScore);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3e5626d4-b1d5-4387-a2cd-e791102390fe",
														"exec": [
															"let simple = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN16 3BB' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN163BB'}",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M32 8EX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M32 8XX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let algorithmic = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=length&given=Selena&address-postcode=DN16 3BB' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&family=length&birthdate=2020-02-11&&given=Selena&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M32 8EX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M32 8XX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let alphanumeric = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3BB' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M32 8EX' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8XX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=speake*&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spaci*&gender=female&address-postcode=DN112EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"",
															"pm.variables.set('testData', testScenarios = [",
															"    { tests: simple },",
															"    { tests: alphanumeric },",
															"    { tests: algorithmic }",
															"]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}",
													"host": [
														"{{environment}}"
													]
												},
												"description": "Validates white spaces in postcodes do not affect Searching i.e. you can search for a patient with the;\n- postcode DN163BB using both DN163BB and DN16 3BB\n- postcode DN16 3BB using both DN16 3BB and DN163BB"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Alphanumeric",
									"item": [
										{
											"name": "By General Practitioner",
											"item": [
												{
													"name": "Search using invalid General Practitioner returns INVALID_VALUE",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3ebc8d7b-538d-4a3c-b4af-f6227502d766",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"errorMessage\"));",
																	"",
																	"assertThatUtil().statusCodeIs(400);",
																	"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
																	"errorMessage().assertDisplayIs(\"Invalid value - '.' in field 'general-practitioner'\");",
																	"errorMessage().assertSeverityIs(\"error\");",
																	"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=.",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "."
																}
															]
														},
														"description": "Validate searching for a patient using an invalid general-practitioner value such as `.` returns an INVALID_VALUE error response"
													},
													"response": []
												},
												{
													"name": "Search using  General Practitioner returns no Patient record when no match is found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c93c6f08-3474-474a-8e6e-33d9f84d4a87",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns 0 patients\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&family=Practitioner&general-practitioner=Y995894&birthdate=ge2000-01-01",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y995894"
																},
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "birthdate",
																	"value": "ge2000-01-01"
																}
															]
														},
														"description": "Validate no patient record is returned when performing a search using criteria including general-practitioner that does not match any patient."
													},
													"response": []
												},
												{
													"name": "Search using valid General Practitioner returns Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8c1d241f-18f3-4204-9ec8-c6a4fddc2a80",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns one patient\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
																	"})",
																	"",
																	"pm.test(\"Returns patient with NHS Number 5900014061\", () => {",
																	"    pm.expect(pm.response.json().entry[0].resource.id).to.equal('5900014061');",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=Y00002",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y00002"
																}
															]
														},
														"description": "Validate patients record is returned when searching by general-practitioner"
													},
													"response": []
												}
											],
											"description": "Patient should be searchable by GP Provider using the query parameter *general-practitioner*.\n",
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Sensitive Patient",
							"item": [
								{
									"name": "Search specifying GP of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e00726da-1e86-4b4a-bb99-60668616ee8e",
												"exec": [
													"eval(pm.globals.get(\"patient\"));",
													"",
													"",
													"pm.test(\"Returns status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9cd48fd8-b1cc-41a6-8721-dfa3b8a89d9c",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?gender=male&birthdate=2000-01-01&family=Ukraine',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Ukraine&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												},
												{
													"key": "_max-results",
													"value": "50",
													"disabled": true
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying GP which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d91b637-125e-4e5f-81d7-6ec4862e1770",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6500189-d9be-4dd5-bd2f-46901cd6c6e0",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48d7fbd9-76e9-45e9-86e5-5e8f7593ceb6",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec588a89-9c81-4ca0-ba44-d700b6d8e9de",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Ukraine&gender=male&address-postcode=B4 3PP",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "address-postcode",
													"value": "B4 3PP"
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82d07f82-1634-4d74-b5aa-b456bc377234",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6303de50-b297-484e-8122-daa29171769a",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&address-postcode=B4*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "address-postcode",
													"value": "B4*"
												}
											]
										},
										"description": "NHS Numbers: 5900013553, 5900005194\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including sensitive patient does not return sensitive details for sensitive patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e23cc577-cf61-4123-8bdb-a99d00e35197",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 2 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(2);",
													"})",
													"",
													"pm.test(\"Returns sensitive patient\", () => {",
													"    pm.expect(response.entry[1].resource.id).to.equal('5900013553');",
													"});",
													"",
													"pm.test(\"Sensitive patients address is not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.address).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients telecome details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.telecom).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients GP details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.generalPractitioner).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the following sensitive details are not returned for the sensitive patient (gp, death-notification extension, address and telecom)"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including invalid patient does not return invalid patients record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25aa5d6c-a91b-4d15-a7c9-a2776f0ca9c5",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900006107')).to.be.false;",
													"});",
													"",
													"pm.test(\"Does return non-invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900003876')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "87818176-5063-4227-84ab-68f51c7d0bb2",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=ge2000-01-01&family=invalidated",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "invalidated"
												}
											]
										},
										"description": "Invalidated NHS Patient number : 5900006107\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients record is not returned"
									},
									"response": []
								},
								{
									"name": "Search matching sensitive patient returns security object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67f7e0a2-d6d4-463f-ad90-4561fe873951",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Returns Sensitive patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900004430')).to.be.true;",
													"});",
													"",
													"pm.test(\"Returns Security object\", () => {",
													"    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('R', 'invalid code');",
													"    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted', 'invalid display');",
													"    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html', 'invalid system');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41b10d82-0fa8-408e-847c-9174e1aa5ad4",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=2001-02-01&family=sensitive",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2001-02-01"
												},
												{
													"key": "family",
													"value": "sensitive"
												}
											]
										},
										"description": "> GIVEN I perform a Search\nAND that matches a Sensitive patient\nWHEN I get the response  \nTHEN the Patients record includes the meta.security array  \nAND the array includes the **R** *restricted level*"
									},
									"response": []
								},
								{
									"name": "Search matching invalid patient only, results in patients data not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c4b3c6b-939f-4ae8-a6b1-8460f8705ea8",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05c9d3df-04ca-4416-91a6-d897beef6dc7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Invalidated&gender=female&given=Patient",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Invalidated"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "given",
													"value": "Patient"
												}
											]
										},
										"description": "**NHS Number: 5900006107**\n\n> GIVEN I perform a Search  \nAND that matches one patient\nAND that patient is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients details are not returned"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Retrieve",
					"item": [
						{
							"name": "Retrieve Patient - Happy path 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a98daeb-fae8-4469-8e92-1aff7222163a",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "37795058-818d-4e6a-b5c4-a9d1847f987a",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
											"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
											"pm.variables.set(\"family\", \"Mapping\");",
											"pm.variables.set(\"prefix\", \"Dame\");",
											"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2010-01-01\");",
											"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"telecomValue\", \"07900000000\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", false);",
											"pm.variables.set(\"patientId\", \"5900009068\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "692f5906-97be-4582-b10e-f266f7f9d0e6",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b438faf4-8007-431a-83d0-3fadbc24f5a3",
										"exec": [
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"alias\");",
											"pm.variables.set(\"family\", \"Alias\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"1990-10-10\");",
											"pm.variables.set(\"prefix\", \"Dr\");",
											"pm.variables.set(\"addressType\", \"work\");",
											"pm.variables.set(\"telecomType\", \"fax\");",
											"pm.variables.set(\"telecomUse\", \"work\");",
											"pm.variables.set(\"given\", [\"John\"]);",
											"pm.variables.set(\"suffix\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"130 Greenhouse Lane\",\"Work Road\",\"Roundhay\",\"Leeds\",\"WEST YORKSHIRE\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2019-01-10\");",
											"pm.variables.set(\"addressPeriodEnd\", \"2020-11-10\");",
											"pm.variables.set(\"postalCode\", \"LS18 4AD\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"metaVersionId\", \"21\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"2342424234\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"language\", \"en\");",
											"pm.variables.set(\"languageDisplay\", \"English\");",
											"pm.variables.set(\"interpreter\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cfa8bfd-8ddb-4611-a0a5-19b4b34c9a2d",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"pm.test.skip('Skipping due to current bug', () => {",
											"    eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"});  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4dabedc-2606-458d-ab53-9e5e131a1b1b",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"",
											"",
											"pm.variables.set(\"nameType\", \"preferred\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"person\"]);",
											"pm.variables.set(\"family\", \"Unknown\");",
											"pm.variables.set(\"prefix\", \"Lady\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"13 westwood\",\"\",\"bradford\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-01-02\");",
											"pm.variables.set(\"postalCode\", undefined);",
											"pm.variables.set(\"addressType\", \"correspondence\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"telecomType\", \"textphone\");",
											"pm.variables.set(\"telecomUse\", \"pager\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", true);",
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a720143-1bed-41a0-aaa4-805e1be5289a",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"pm.test.skip('Skipping due to current bug', () => {",
											"    eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"});  ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4918a0e4-dc49-4296-850f-11da8149f6e7",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"previous\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"someone\"]);",
											"pm.variables.set(\"family\", \"previous\");",
											"pm.variables.set(\"prefix\", \"Lord\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2008-01-01\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"1 Temporary Ave\",\"Temporary Place\",\"Temporary Town\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
											"pm.variables.set(\"postalCode\", \"BD2 7NT\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
											"pm.variables.set(\"telecomType\", \"email\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"patientId\", \"5900019241\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca90626e-b6c3-47b0-be8e-4cd10e2f1d32",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"pm.test.skip('Skipping due to current bug', () => {",
											"    eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"});  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c745a42-ac05-4c11-abe9-b18b9e0ce568",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"family\", \"temporary\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2004-03-01\");",
											"pm.variables.set(\"prefix\", \"Miss\");",
											"pm.variables.set(\"nameType\", \"birth\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"mobile\");",
											"pm.variables.set(\"given\", [\"ned\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"13 Westwood\",\"Eccleshill\",\"Bradford\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09000000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1569678-6242-4a08-aaf3-9b942cd697cf",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"pm.test.skip('Skipping due to current bug', () => {",
											"    eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"});  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "66d4a372-b464-4c8b-9c70-724f63a0810a",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mr\");",
											"pm.variables.set(\"nameType\", \"bachelor\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"temporary\");",
											"pm.variables.set(\"family\", \"Mister\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2009-01-01\");",
											"pm.variables.set(\"given\", [\"Any\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 9 - Superceded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b97b2495-e8c8-4de1-b452-86b8d03c8cad",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"pm.test.skip('Skipping due to current bug', () => {",
											"    eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"});  "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41c8d46e-66f9-457a-a056-324b296e2117",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"supercededPatientId\", \"5900006360\");",
											"",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"Retained\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2006-04-01\");",
											"pm.variables.set(\"given\", [\"Jon\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"\",\"15 Retained Road\",\"\",\"Retained\",\"\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LK\");",
											"pm.variables.set(\"patientId\", \"5900011143\");",
											"pm.variables.set(\"resourceType\", \"Patient\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{supercededPatientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* If the Patient record is marked as Superceded, the response shall return the Retained record for the Patient\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* nameFamily\r\n* nameGiven\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* resourseType\r\n* patientId\r\n* identifierExtention"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Sensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "151d3c57-846d-4699-b8f4-044bc826e348",
										"exec": [
											"var response = pm.response.json();",
											"pm.test.skip('Skipping due to current bug', () => {",
											"    eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"});",
											"pm.variables.set(\"s-flagged\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e64422ba-6573-466c-a7b6-afdb349bdf45",
										"exec": [
											"pm.variables.set(\"s-flagged\", true);",
											"",
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"sensitive\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"given\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"patientId\", \"5900004430\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"deceasedDateTime\", \"2009-03-01\");",
											"pm.variables.set(\"securityCode\", \"R\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationStatus.display\", \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");",
											"pm.variables.set(\"language\", \"be\");",
											"pm.variables.set(\"languageDisplay\", \"Belarusian\"),",
											"pm.variables.set(\"interpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900004430",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900004430"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9cf11ac3-c294-4cdb-93dc-23399264354c",
				"type": "text/javascript",
				"exec": [
					"console.log('Running against environment ' + pm.environment.get('environment'));",
					"",
					"// These are the headers for the pm.sendRequest calls",
					"var Header = require('postman-collection').Header;",
					"",
					"pm.environment.set(\"asidHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-asid-header\"),",
					"    value: pm.environment.get(\"from_asid\")",
					"}));",
					"",
					"pm.environment.set(\"sessionURIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-session-urid-header\"),",
					"    value: pm.environment.get(\"role_id\")",
					"}));",
					"",
					"pm.environment.set(\"identityUUIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-identity-uuid-header\"),",
					"    value: pm.environment.get(\"user_id\")",
					"}));",
					"",
					"pm.environment.set(\"authorizationHeader\", new Header({",
					"    key: 'Authorization',",
					"    value: 'Bearer ' + pm.globals.get(\"token\")",
					"}));",
					"",
					"",
					"// When running against apigee, there are a set of headers which we don't want to pass in.",
					"if (pm.environment.get('environment').toLowerCase().includes('api.service.nhs.uk')) {",
					"    console.log(\"Removing headers when running via apigee\");",
					"    pm.request.headers.remove('{{nhsd-asid-header}}');",
					"    pm.request.headers.remove('{{nhsd-identity-uuid-header}}');",
					"    pm.request.headers.remove('NHSD-Identity-JWT');",
					"",
					"    pm.environment.set(\"asidHeader\", undefined);",
					"    pm.environment.set(\"identityUUIDHeader\", undefined);",
					"",
					"    console.log(\"Adding Authorization header\");",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + pm.globals.get(\"token\")",
					"    });",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1526cdca-9881-4403-a548-14a3f05d3311",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f82fcd45-2eec-48d6-b264-127d3a6e60b1",
			"key": "metaVersion",
			"value": "173",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}