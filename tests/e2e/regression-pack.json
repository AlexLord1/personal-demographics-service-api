{
	"info": {
		"_postman_id": "e863b0f6-9e96-4a05-b007-cf60be76a37f",
		"name": "Personal Demographics Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Framwork Setup",
			"item": [
				{
					"name": "createPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a9ac1ec6-836f-4b60-9f38-b28bf6a81e8a",
								"exec": [
									"/*CreatePatient Function*/",
									"",
									"var createPatient = () => {",
									"",
									"        /*create a random firstname*/",
									"        let given = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
									"        pm.variables.set(\"given\", given);",
									"        console.log(\"Random 'Given' name created is: \" + pm.variables.get(\"given\"));",
									"",
									"        /*create a random lastname*/",
									"        let family = pm.variables.replaceIn(\"{{$randomLastName}}\");",
									"        pm.variables.set(\"family\", family);",
									"        console.log(\"Random 'family' name created is: \" + pm.variables.get(\"family\"));",
									"",
									"        /*create a random houseNumber*/",
									"        let addressHouseNumber = pm.variables.replaceIn(\"{{$randomInt}}\");",
									"        pm.variables.set(\"addressHouseNumber\", addressHouseNumber);",
									"        console.log(\"Random 'houseNumber' created is: \" + pm.variables.get(\"addressHouseNumber\"));",
									"",
									"        /*create a random Street*/",
									"        let addressStreet = pm.variables.replaceIn(\"{{$randomStreetName}}\");",
									"        pm.variables.set(\"addressStreet\", addressStreet);",
									"        console.log(\"Random 'addressStreet' created is: \" + pm.variables.get(\"addressStreet\"));",
									"",
									"        /*create a random District*/",
									"        let addressDistrict = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" District\";",
									"        pm.variables.set(\"addressDistrict\", addressDistrict);",
									"        console.log(\"Random 'addressDistrict' created is: \" + pm.variables.get(\"addressDistrict\"));",
									"",
									"        /*create a random City*/",
									"        let addressCity = pm.variables.replaceIn(\"{{$randomCity}}\");",
									"        pm.variables.set(\"addressCity\", addressCity);",
									"        console.log(\"Random 'addressCity' created is: \" + pm.variables.get(\"addressCity\"));",
									"",
									"        /*create a random County*/",
									"        let addressCounty = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" County\";",
									"        pm.variables.set(\"addressCounty\", addressCounty);",
									"        console.log(\"Random 'addressCounty' created is: \" + pm.variables.get(\"addressCounty\"));",
									"",
									"        /*create a random postCode*/",
									"        pm.variables.set(\"postCode\", \"PD12\" + _.random(1, 9) + \"PD\");",
									"        console.log(\"Random 'postCode' created is: \" + pm.variables.get(\"postCode\"));",
									"",
									"        /*create a random gender*/",
									"        pm.variables.set(\"gender\", _.random(1, 2));",
									"        console.log(\"Random 'gender' created is: \" + pm.variables.get(\"gender\"));",
									"",
									"        /*create a random birthDate*/",
									"        var moment = require('moment');",
									"        let randomYears = _.random(10, 50);",
									"        pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));",
									"        pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));",
									"        console.log(\"Random 'birthTime' created is: \" + pm.variables.get(\"birthTime\"));",
									"        console.log(\"Random 'birthDate' created is: \" + pm.variables.get(\"birthDate\"));",
									"      ",
									"};",
									"pm.globals.set(\"createPatient\", createPatient.toString());",
									"createPatient();",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55c832b5-7e81-43c7-a3cd-69802be594d1",
								"exec": [
									"eval(pm.globals.get(\"createPatient\"))();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "This function creates a patient made up of randomised variables, consiting of: \n\n- given name\n- family name\n- address lines (5 lines in total)\n- postcode\n- gender\n- birthdate\n\nit can be used to create a Patient using the Personal Demographics service - HL7 V3 API"
					},
					"response": []
				},
				{
					"name": "FHIR Error Reponse Validator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "740d660c-f953-4e59-9271-a89d1f021d98",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d0b8d2cd-1e8c-4fb1-a9cc-21ce4a35cc09",
								"exec": [
									"// Error Message Validation: Provides tests to assert against FHIR error response",
									"",
									"pm.globals.set('errorMessage', function errorMessage() {",
									"    let response = pm.response.json();",
									"    let message = {};",
									"",
									"    message.assertCodeIs = (code) => {",
									"        pm.test(\"Returns the code \" + code, () => {",
									"            pm.expect(response.issue[0].details.coding[0].code).to.eql(code);",
									"        });",
									"    }",
									"",
									"    message.assertDisplayIs = (display) => {",
									"        pm.test(\"Returns the display message \" + display, () => {",
									"            pm.expect(response.issue[0].details.coding[0].display).to.eql(display);",
									"        });",
									"    }",
									"",
									"    message.assertSeverityIs = (severity) => {",
									"        pm.test(\"Returns the severity \" + severity, () => {",
									"            pm.expect(response.issue[0].severity).to.eql(severity);",
									"        });",
									"    }",
									"    ",
									"",
									"    message.assertSystemIs = (system) => {",
									"        pm.test(\"Returns the system message \" + system, () => {",
									"            pm.expect(response.issue[0].details.coding[0].system).to.eql(system);",
									"        });",
									"    }",
									"",
									"    return message;",
									"} + '; errorMessage();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "# Function: FHIR Error Response Validator\n___\n### Description\nThis function provides the capability to assert aspects of the generic FHIR based error response matches expectation.\n \n##### Example FHIR Error Response\n```\n{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}\n```\n\n### Usage\nUse eval to evaluate the function, which is stored as the global variable _errorMessage_\n```\neval(pm.globals.get(\"errorMessage\"));\n```\nCall the various different internal 'methods' to assert against key parts of the error message\n```\nerrorMessage().assertCodeIs(\"EXTRA_VALUE\");\nerrorMessage().assertDisplayIs(\"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\");\nerrorMessage().assertSeverityIs(\"error\");\nerrorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\n```\n\n### Output\n- PASS Returns the code EXTRA_VALUE\n- PASS Returns the display message Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\n- PASS Returns the severity error\n- PASS Returns the system message https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode"
					},
					"response": []
				},
				{
					"name": "Patient Validator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98e2a503-09ef-40b7-9eb7-12fb1e20e088",
								"exec": [
									"// Patient Utility: Provides key patient response related functions",
									"pm.globals.set('patient', function patient() {",
									"    let response = pm.response.json();",
									"    let calls = {};",
									"",
									"    calls.getScores = () => {",
									"        var scores = [];",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            scores.push(response.entry[i].search.score);",
									"        }",
									"",
									"        return scores;",
									"    }",
									"",
									"    calls.getTotalNumberOfPatients = () => {",
									"        let response = JSON.parse(responseBody);",
									"        return response.total;",
									"    };",
									"    ",
									"    calls.containsPatientWithNhsNumber = function(nhsNumber) {",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            if(response.entry[i].resource.id === nhsNumber) {",
									"                return true;",
									"            }",
									"        }",
									"",
									"        return false;",
									"    };",
									"    ",
									"    calls.getScoreByNhsNumber = function(resp, nhsNumber) {",
									"        console.log(\"HERE: \" + resp);",
									"        for (i = 0; i < resp.entry.length; i++) {",
									"            if (resp.entry[i].resource.id === nhsNumber) {",
									"                return resp.entry[i].search.score;",
									"            }",
									"        }",
									"",
									"        return null;",
									"    };",
									"",
									"    return calls;",
									"} + '; patient();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Response Assertions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94c73eac-c908-4db9-b9fb-2996774b92f1",
								"exec": [
									"// Assert utility: Tests for key aspects of the response",
									"pm.globals.set(\"assertThatUtil\", function assertThatUtil() {",
									"    let response = pm.response.json();",
									"    let util = {};",
									"",
									"    util.statusCodeIs = (code) => {",
									"        pm.test(\"Returns status code \" + code, () => {                    ",
									"            pm.response.to.have.status(code);            ",
									"        });",
									"",
									"    };",
									"",
									"    util.responseContainsHeader = (headerName, headerValue) => {",
									"        pm.test(\"Response contains header \" + headerName + \" with value \" + headerValue, () =>{",
									"            pm.response.to.have.header(headerName);",
									"            pm.expect(postman.getResponseHeader(headerName)).to.equal(headerValue);",
									"        });",
									"    };",
									"",
									"    return util;",
									"} + '; assertThatUtil();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildAndSendHL7Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf0ec4f5-d38c-433a-a076-57aa015c414a",
								"exec": [
									"var BuildHL7Patient = () => {\r",
									"    let givenName = 'Testing';\r",
									"\r",
									"    let patientBuilder = pm.variables.get('PatientBuilder');\r",
									"    if(patientBuilder) {        \r",
									"        givenName = (patientBuilder.hasGivenName == true || patientBuilder.hasGivenName == undefined)  ? givenName : undefined;        \r",
									"    }\r",
									"\r",
									"    /*create a random guid for messageid*/\r",
									"    let messageGUID = pm.variables.replaceIn('{{$randomUUID}}')\r",
									"    pm.variables.set(\"HL7messageGUID\", messageGUID);\r",
									"\r",
									"    /*create a random guid for rootid*/\r",
									"    let rootGUID = pm.variables.replaceIn('{{$randomUUID}}')\r",
									"    pm.variables.set(\"HL7rootGUID\", rootGUID);\r",
									"\r",
									"    /*create a random lastname*/\r",
									"    let family = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"    pm.variables.set(\"family\", family);\r",
									"    console.log(pm.variables.get(\"family\"))\r",
									"\r",
									"    /*create a random postCode*/\r",
									"    pm.variables.set(\"postCode\", \"HL12\" + \" \" + _.random(1, 9) + \"HL\");\r",
									"    console.log(pm.variables.get(\"postCode\"))\r",
									"\r",
									"    /*create a random birthDate*/\r",
									"    var moment = require('moment');\r",
									"    let randomYears = _.random(10, 50);\r",
									"    pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));\r",
									"    pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));\r",
									"    console.log(pm.variables.get(\"birthDate\"))\r",
									"\r",
									"    pm.globals.set(\"HL7PatientMessage\", '----=_MIME-Boundary' + '\\n' + 'Content-Id: <8e68e6bb-2044-44f1-9427-271bccdad97a>' + '\\n' + 'Content-Type: text/xml' + '\\n' + 'Content-Transfer-Encoding: 8bit' + '\\n\\n' + '<?xml version=\"1.0\" encoding=\"UTF-8\"?><SOAP:Envelope xmlns:xsi=\"http://www.w3c.org/2001/XML-Schema-Instance\" xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:eb=\"http://www.oasis-open.org/committees/ebxml-msg/schema/msg-header-2_0.xsd\" xmlns:hl7ebxml=\"urn:hl7-org:transport/ebxml/DSTUv1.0\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><SOAP:Header><eb:MessageHeader SOAP:mustUnderstand=\"1\" eb:version=\"2.0\"><eb:From><eb:PartyId eb:type=\"urn:nhs:names:partyType:ocs+serviceInstance\">RHM-812580</eb:PartyId></eb:From><eb:To><eb:PartyId eb:type=\"urn:nhs:names:partyType:ocs+serviceInstance\">YES-0000806</eb:PartyId></eb:To><eb:CPAId>S20002A000236</eb:CPAId><eb:ConversationId>' + pm.variables.get(\"HL7messageGUID\") + '</eb:ConversationId><eb:Service>urn:nhs:names:services:pds</eb:Service><eb:Action>PRPA_IN000200UK03</eb:Action><eb:MessageData><eb:MessageId>' + pm.variables.get(\"HL7messageGUID\") + '</eb:MessageId><eb:Timestamp>2020-05-12T08:23:49</eb:Timestamp></eb:MessageData><eb:DuplicateElimination/></eb:MessageHeader><eb:AckRequested eb:version=\"2.0\" SOAP:mustUnderstand=\"1\" SOAP:actor=\"urn:oasis:names:tc:ebxml-msg:actor:toPartyMSH\" eb:signed=\"false\"/><eb:SyncReply eb:version=\"2.0\" SOAP:mustUnderstand=\"1\" SOAP:actor=\"http://schemas.xmlsoap.org/soap/actor/next\"/></SOAP:Header><SOAP:Body><eb:Manifest eb:version=\"2.0\"><eb:Reference xlink:href=\"cid:31321d7e-d449-40f2-8362-6598c5b3ffae\"><eb:Schema eb:location=\"http://www.nhsia.nhs.uk/schemas/HL7-Message.xsd\" eb:version=\"1.0\"/><eb:Description xml:lang=\"en\">HL7 payload</eb:Description><hl7ebxml:Payload style=\"HL7\" encoding=\"XML\" version=\"3.0\"/></eb:Reference></eb:Manifest></SOAP:Body></SOAP:Envelope>' + '\\n\\n' + '----=_MIME-Boundary' + '\\n' + 'Content-Id: <31321d7e-d449-40f2-8362-6598c5b3ffae>' + '\\n' + 'Content-Type: application/xml; charset=UTF-8' + '\\n' + 'Content-Transfer-Encoding: 8bit' + '\\n\\n' + '<?xml version=\"1.0\" encoding=\"UTF-8\"?><PRPA_IN000200UK03 xmlns=\"urn:hl7-org:v3\"><id root=\"' + pm.variables.get(\"HL7rootGUID\") + '\"/><creationTime value=\"20200512082349\"/><versionCode code=\"V3NPfIT4.2.00\"/><interactionId extension=\"PRPA_IN000200UK03\" root=\"2.16.840.1.113883.2.1.3.2.4.12\"/><processingCode code=\"P\"/><processingModeCode code=\"T\"/><acceptAckCode code=\"NE\"/><communicationFunctionRcv><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"928942012545\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionRcv><communicationFunctionSnd><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionSnd><ControlActEvent classCode=\"CACT\" moodCode=\"EVN\"><author1 typeCode=\"AUT\"><AgentSystemSDS classCode=\"AGNT\"><agentSystemSDS classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></agentSystemSDS></AgentSystemSDS></author1><subject>\t\t\t<PdsRegistrationRequest classCode=\"REG\" moodCode=\"RQO\"><author typeCode=\"AUT\"><registeringAuthority classCode=\"ASSIGNED\"><code code=\"c\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.16.20\" /><id root=\"1.2.826.0.1285.0.2.1.54\" extension=\"TEST\" /></registeringAuthority></author><subject typeCode=\"SBJ\"><patientRole classCode=\"PAT\"><addr use=\"H\"><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><postalCode>' + pm.variables.get(\"postCode\") + '</postalCode></addr><patientPerson classCode=\"PSN\" determinerCode=\"INSTANCE\"><administrativeGenderCode code=\"2\" /><birthTime value=\"' + pm.variables.get(\"birthTime\") + '\" /><name use=\"L\">' + getGivenName() + '<family>' + pm.variables.get(\"family\") + '</family><prefix>Mr</prefix><suffix>Bsc</suffix></name><languageCommunication><languageCode code=\"hy\" /><preferenceInd value=\"true\" /><proficiencyLevelCode code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.16.39\" /></languageCommunication></patientPerson><subjectOf5 typeCode=\"SBJ\"><previousNhsContact classCode=\"OBS\" moodCode=\"EVN\"><code code=\"17\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.35\" /><value code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.38\" /></previousNhsContact></subjectOf5></patientRole></subject></PdsRegistrationRequest></subject></ControlActEvent></PRPA_IN000200UK03>' + '\\n\\n' + '----=_MIME-Boundary--')\r",
									"\r",
									"\r",
									"\r",
									"function getGivenName() {\r",
									"    if(givenName) {\r",
									"        return '<given>' + givenName + '</given>';\r",
									"    }\r",
									"}\r",
									"\r",
									"};\r",
									"pm.globals.set(\"BuildHL7Patient\", BuildHL7Patient.toString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d5428d77-ed94-4ef9-8aa9-f246afaf8276",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "{{nhsd-asid-header}}",
								"type": "text",
								"value": "{{from_asid}}"
							},
							{
								"key": "{{nhsd-session-urid-header}}",
								"type": "text",
								"value": "{{role_id}}"
							},
							{
								"key": "{{nhsd-identity-uuid-header}}",
								"type": "text",
								"value": "{{user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "Testing the correct url is returned on an error response"
					},
					"response": []
				},
				{
					"name": "PDS Search & Retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab1ae304-87a2-488c-b126-816a72d29504",
								"exec": [
									"/*This function Sends a PDS Search request to obbtain the Patient nhs Id & patient record version Id\r",
									"====================================================================================================*/\r",
									"\r",
									"var SendPDSSearch = () => {\r",
									"    setTimeout(function () {\r",
									"        var Header = require('postman-collection').Header;\r",
									"        let asidHeader = pm.variables.get(\"asidHeader\");\r",
									"        let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
									"        let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
									"        let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + \"/Patient?family=\" + pm.variables.get(\"family\") + \"&gender=female&birthdate=\" + pm.variables.get(\"birthDate\"),\r",
									"            method: 'GET',\r",
									"            header: { authorization, asidHeader, sessionURIDHeader, identityUUIDHeader }\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check PDS Search returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            pm.globals.set(\"nhsID\", response.json().entry[0].resource.id);\r",
									"            pm.globals.set(\"metaVersionId\", 'W/\"' + response.json().entry[0].resource.meta.versionId + '\"')\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().entry[0].resource.meta.versionId));\r",
									"            pm.variables.set(\"name.id\", response.json().entry[0].resource.name[0].id);            \r",
									"            console.log(\"meta version id of Patient is: \" + pm.globals.get(\"metaVersionId\"))\r",
									"            console.log(\"nhs id of Patient is: \" + pm.globals.get(\"nhsID\"))\r",
									"        });\r",
									"    }, 3000);\r",
									"}\r",
									"\r",
									"pm.globals.set(\"SendPDSSearch\", SendPDSSearch.toString());\r",
									"\r",
									"\r",
									"/*Send a PDS Retrieve request to obbtain the Patient patient record version Id.\r",
									"=============================================================================*/\r",
									"\r",
									"var SendPDSRetrieve = () => {\r",
									"    setTimeout(function () {\r",
									"        var Header = require('postman-collection').Header;\r",
									"        let asidHeader = pm.variables.get(\"asidHeader\");\r",
									"        let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
									"        let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
									"        let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + \"/Patient/\" + pm.globals.get(\"nhsID\"),\r",
									"            method: 'GET',\r",
									"            header: { authorization, asidHeader, sessionURIDHeader, identityUUIDHeader }\r",
									"\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check PDS Retrieve returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            pm.globals.set(\"metaVersionId\", response.headers.get('Etag'));\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().meta.versionId));\r",
									"            console.log(\"Patient record version is: \" + pm.variables.get(\"versionId\"));\r",
									"            console.log(\"Patient record version is: \" + pm.globals.get(\"metaVersionId\"));\r",
									"            pm.variables.set(\"pdsRetrieveResponse\", response.json())\r",
									"            pm.environment.set(\"pdsRetrieveCounter\", 2)\r",
									"            console.log(pm.environment.get(\"pdsRetrieveCounter\"))\r",
									"        })\r",
									"    }, 1000);\r",
									"};\r",
									"pm.globals.set(\"SendPDSRetrieve\", SendPDSRetrieve.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildAndSendHL7RetreivePatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "72a73ce3-d517-4963-883e-68113795ff57",
								"exec": [
									"/*This function builds and sends a HL7 Retrieve request and saves the response to a global variable: \"HL7RetrieveResponse\" for the purposes of asserting the payload\r",
									"====================================================================================================================================================================*/\r",
									"\r",
									"var SendHL7RetrievePatientMessage = () => {\r",
									"    setTimeout(function () {\r",
									"        pm.globals.set(\"HL7RetrievePatientMessage\", '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:hl7=\"urn:hl7-org:v3\"><SOAP-ENV:Header><wsa:MessageID>uuid:82CC8716-71B7-44F3-B885-B18DD08B31AE</wsa:MessageID><wsa:Action>urn:nhs:names:services:pdsquery/QUPA_IN000008UK05</wsa:Action><wsa:To>https://10.239.9.7/sync-service</wsa:To><wsa:From><wsa:Address>10.210.164.11</wsa:Address></wsa:From><hl7:communicationFunctionRcv><hl7:device><hl7:id root=\"1.2.826.0.1285.0.2.0.107\" extension=\"928942012545\"/></hl7:device></hl7:communicationFunctionRcv><hl7:communicationFunctionSnd><hl7:device><hl7:id root=\"1.2.826.0.1285.0.2.0.107\" extension=\"230705069519\"/></hl7:device></hl7:communicationFunctionSnd><wsa:ReplyTo><wsa:Address>10.210.164.11</wsa:Address></wsa:ReplyTo></SOAP-ENV:Header><SOAP-ENV:Body><QUPA_IN000008UK05 xmlns=\"urn:hl7-org:v3\"><id root=\"D3C68B29-9533-45D6-837C-3375CFFE07D1\"/><creationTime value=\"20200511140552\"/><versionCode code=\"V3NPfIT4.2.00\"/><interactionId extension=\"QUPA_IN000008UK05\" root=\"2.16.840.1.113883.2.1.3.2.4.12\"/><processingCode code=\"P\"/><processingModeCode code=\"T\"/><acceptAckCode code=\"NE\"/><communicationFunctionRcv><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"928942012545\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionRcv><communicationFunctionSnd><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionSnd><ControlActEvent classCode=\"CACT\" moodCode=\"EVN\"><author1 typeCode=\"AUT\"><AgentSystemSDS classCode=\"AGNT\"><agentSystemSDS classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></agentSystemSDS></AgentSystemSDS></author1><query><historicDataIndicator><semanticsText>HistoricDataIndicator</semanticsText><value code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.36\"/></historicDataIndicator><person.id><semanticsText>Person.id</semanticsText><value root=\"2.16.840.1.113883.2.1.4.1\" extension=\"' + pm.globals.get(\"nhsID\") + '\"/></person.id><retrievalItem><semanticsText>person.allData</semanticsText></retrievalItem></query></ControlActEvent></QUPA_IN000008UK05></SOAP-ENV:Body></SOAP-ENV:Envelope>')\r",
									"\r",
									"        var Header = require('postman-collection').Header;\r",
									"\r",
									"        /*set message headers*/\r",
									"        let contentType = new Header({\r",
									"            key: 'Content-Type',\r",
									"            value: 'application/xml'\r",
									"        });\r",
									"        let SOAPAction = 'urn:nhs:names:services:pdsquery/QUPA_IN000008UK05'\r",
									"\r",
									"        /*set message body*/\r",
									"        var xmlBody = pm.globals.get(\"HL7RetrievePatientMessage\")\r",
									"\r",
									"        /*send request with pre-defined headers and body*/\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + '/reliablemessaging/reliablerequest',\r",
									"            method: 'POST',\r",
									"            header: { contentType, SOAPAction },\r",
									"            body: xmlBody\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check HL7 Retrieve Patient returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            var response = xml2Json(response.text());\r",
									"            pm.globals.set(\"HL7RetrieveResponse\", response)\r",
									"            console.log(pm.globals.get(\"HL7RetrieveResponse\"))\r",
									"        })\r",
									"    }, 1000);\r",
									"};\r",
									"pm.globals.set(\"SendHL7RetrievePatientMessage\", SendHL7RetrievePatientMessage.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dc5c7f83-e07d-483b-914f-0d92f877d1b9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "SOAPAction",
								"type": "text",
								"value": "urn:nhs:names:services:pdsquery/QUPA_IN000008UK05"
							}
						],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildMeAPatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2363225-91ae-4315-b9b9-5100dec32788",
								"exec": [
									"/* this function builds patches for the purposes of using in PDS Update patch requests when needed.  Each patch gets saved to a variable that is then called by createMeAPatchRequest\r",
									"=====================================================================================================================================================*/\r",
									"\r",
									"pm.globals.set('BuildMeAPatch', function BuildMeAPatch() {\r",
									"\r",
									"       addDeathNotificationPatch = () => {\r",
									"               let addDeathNotificationPatch = '{ \"patches\": [\t{ \"op\": \"add\", \"path\": \"/deceasedDateTime\", \"value\": \"2020-01-01\" }, { \"op\": \"add\", \"path\": \"/extension/-\", \"value\": { \"extension\": [ { \"url\": \"deathNotificationStatus\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"1\", \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\", \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\", \"version\": \"1.0.0\" } ] } }, { \"url\": \"systemEffectiveDate\", \"valueDateTime\": \"2020-02-27T16:14:58+00:00\" } ], \"url\": \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\" } } ] }'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addDeathNotificationPatch.toString());\r",
									"       }\r",
									"\r",
									"        addMSAndDDPatch = () => {\r",
									"              let addMSAndDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addMSAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPAndMASPatch = () => {\r",
									"                let addNPAndMASPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}}]}'\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPAndMSAndDDPatch = () => {\r",
									"            let addNPAndMSAndDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"value\":\"C81621\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/C81621\"}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"},\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/FYR20\"}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndMSAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPPatch = () => {\r",
									"            let addNPPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"reference\":\"https://directory.spineservices.nhs.uk/STU3/Organization/Y12345\",\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeDDPatch = () => {\r",
									"            let removeDDPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", removeDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeMASPatch = () => {\r",
									"            let removeMASPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeNPPatch = () => {\r",
									"            let removeNPPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeNPPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeNPAndMASPatch = () => {\r",
									"            let removeNPAndMASPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\"},{\"op\":\"remove\",\"path\":\"/extension/0\"},{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeNPAndMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeMASAndDDPatch = () => {\r",
									"            let removeMASAndDDPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"},{\"op\":\"remove\",\"path\":\"/extension/0\"},{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"/*generalPractitioner mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('generalPractitioner is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.generalPractitioner).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"generalPractitioner has been mapped correctly\", function () {\r",
									"        console.log(\"expected generalPractitionerValue = \" + (pm.variables.get(\"\")));\r",
									"        console.log(\"returned generalPractitionerValue = \" + (JSON.stringify(response.entry[0].resource.generalPractitioner)));\r",
									"        var generalPractitionerValueExists = (pm.variables.get(\"generalPractitionerValue\"));\r",
									"        if (!generalPractitionerValueExists) {\r",
									"            console.log(\"if generalPractitionerValue doesnt exist then there should be no generalPractice returned = \" + response.entry[0].resource.generalPractitioner);\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.generalPractitioner)).to.eql(undefined);\r",
									"        }\r",
									"        else if (generalPractitionerValueExists) {\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"        }\r",
									"        pm.variables.unset(\"generalPractitionerValue\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"    });\r",
									"}\r",
									"\r",
									"/*extention items*/\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeMASAndDDPatch.toString());\r",
									"        }\r",
									"} + '; BuildMeAPatch();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateMeAPatchRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1befc082-d7d2-4bb8-9334-f2e4bfc0844c",
								"exec": [
									"/* This function creates Patch requests to be used as pm.send requests for the purposes of pre-requisites.\r",
									"=========================================================================================================*/\r",
									"\r",
									"\r",
									"var createMeAPatchRequest = () => {\r",
									"\r",
									"    var Header = require('postman-collection').Header;\r",
									"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
									"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
									"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
									"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
									"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
									"    let pdsPatch = pm.variables.get(\"pdsPatch\");\r",
									"\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
									"        method: 'PATCH',\r",
									"        header: {\r",
									"            authorization,\r",
									"            asidHeader,\r",
									"            sessionURIDHeader,\r",
									"            identityUUIDHeader,\r",
									"            contentType,\r",
									"            ifMatch\r",
									"        },\r",
									"        body: pdsPatch\r",
									"\r",
									"    }, function (err, response) {\r",
									"        pm.test(\"Returns Status code 200\", function () {\r",
									"            pm.expect(response.code).to.equal(202);\r",
									"        });\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"pm.globals.set(\"createMeAPatchRequest\", createMeAPatchRequest.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "relatedPersonMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4a7dafc-a754-47e0-9a57-6b9d2d82fa00",
								"exec": [
									"var relatedPersonMappings = () => {\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"relatedPersonGiven\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"relatedPersonFamily\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"relatedPersonPrefix\")) {\r",
									"            pm.expect(response.entry[0].resource.name[0].prefix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"            pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"relatedPersonPrefix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"relatedPersonSuffix\")  === undefined ) {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"relatedPersonSuffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'use' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"});\r",
									"\r",
									"/*Check Patient use has been populated properly*/\r",
									"pm.test(\"Patient has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.patient.type).to.eql(\"Patient\");\r",
									"   \r",
									"   if (pm.variables.get(\"relatedPersonPatientID\")) {\r",
									"      pm.expect(response.entry[0].resource.patient.reference).to.eql(\"https://beta.api.digital.nhs.uk/Patient/\" + pm.variables.get(\"relatedPersonPatientID\"));\r",
									"      pm.expect(response.entry[0].resource.patient.identifier.system).to.eql(\"https://beta.api.digital.nhs.uk\");\r",
									"      pm.expect(response.entry[0].resource.patient.identifier.value).to.eql(pm.variables.get(\"relatedPersonPatientID\"));\r",
									"   }\r",
									"   else {\r",
									"      pm.expect(response.entry[0].resource.patient.reference).to.eql(undefined);\r",
									"      pm.expect(response.entry[0].resource.patient.identifier).to.eql(undefined);\r",
									"   }\r",
									"});\r",
									"\r",
									"/*Check Period Start has been populated properly*/\r",
									"pm.test(\"Period Start has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check Period End has been populated properly*/\r",
									"pm.test(\"Period End has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"relatedPersonPeriodEnd\")){\r",
									"        pm.expect(response.entry[0].resource.period.end).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.period.end).to.eql(pm.variables.get(\"relatedPersonPeriodEnd\"));\r",
									"    }\r",
									"});\r",
									"\r",
									" \r",
									"/*Check Relationship has been populated properly*/\r",
									"pm.test(\"Relationship has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"relatedPersonRelationshipType\") == \"brother\") {\r",
									"            pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"BRO\");\r",
									"            pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"brother\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"child\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"CHILD\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"child\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"partner\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"DOMPART\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"domestic partner\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"relative\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"FAMMEMB\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"family member\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"father\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"FTH\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"father\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"mother\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"MTH\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"mother\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"next of kin\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"N\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"Next-of-Kin\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"parent\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"PRN\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"parent\");\r",
									"    }\r",
									"    else pm.expect.fail(\"relationshipType not been mapped correctly\");\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.relationship[0].coding[0].system).to.eql(\"http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype\");\r",
									"    \r",
									"    if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Agent\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Agent\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Agent of patient\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Guardian\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Guardian\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Guardian of patient\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Personal relationship\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Personal\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Personal relationship with the patient\");\r",
									"    }\r",
									"    else pm.expect.fail(\"relationshipClass not been mapped correctly\");\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.relationship[0].coding[1].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-AdditionalRelatedPersonRole\");\r",
									"    \r",
									"    if  (pm.variables.get(\"relatedPersonRelationshipNOKDisplay\")) {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].code).to.eql(pm.variables.get(\"relatedPersonRelationshipNOKCode\"));\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].display).to.eql(pm.variables.get(\"relatedPersonRelationshipNOKDisplay\"));\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].system).to.eql(\"http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype\");\r",
									"    }\r",
									"   else \r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2]).to.eql(undefined);\r",
									"});\r",
									"\r",
									"/*Check resourceType has been populated properly*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.resourceType).to.eql(\"RelatedPerson\");\r",
									"});\r",
									"\r",
									"/*Check Telecom Use has been mapped correctly*/\r",
									"pm.test(\"Telecom Use has been mapped correctly\", function () {    \r",
									"    let telecomUse;\r",
									"    switch (pm.variables.get(\"relatedPersontelecomUse\").toLowerCase()) {\r",
									"        case 'home':\r",
									"        case 'answering machine':\r",
									"            telecomUse = \"home\";\r",
									"            break;\r",
									"        case 'work':\r",
									"        case 'mobile':\r",
									"            telecomUse = pm.variables.get(\"relatedPersontelecomUse\");\r",
									"            break;\r",
									"        case 'pager':\r",
									"            telecomUse = \"mobile\";\r",
									"            break;\r",
									"        case 'temporary':\r",
									"            telecomUse = \"temp\";\r",
									"            break;\r",
									"    }\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomUse\") == \"emergency\") {\r",
									"        console.log(\"here\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].use).to.eql(undefined, \"invalid telecomUse\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period).to.eql(undefined);\r",
									"    }\r",
									"\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"relatedPersontelecomPeriodStart\")));\r",
									"    }\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomValue\")) {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"relatedPersontelecomValue\")));\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql(undefined);\r",
									"    }       \r",
									"});\r",
									"\r",
									"/*Check Telecom System has been mapped correctly*/\r",
									"pm.test(\"Telecom System has been mapped correctly\", function () {\r",
									"    let telecomType;\r",
									"\r",
									"    switch (pm.variables.get(\"relatedPersontelecomType\").toLowerCase()) {\r",
									"        case 'telephone':\r",
									"            telecomType = \"phone\";\r",
									"            break;\r",
									"        case 'fax':\r",
									"        case 'email':\r",
									"            telecomType = pm.variables.get(\"relatedPersontelecomType\");\r",
									"            break;\r",
									"        case 'textphone':\r",
									"            telecomType = \"other\";\r",
									"            break;\r",
									"        default:\r",
									"            pm.expect.fail(\"telecomType mapping failure\");\r",
									"            break;\r",
									"    }\r",
									"    pm.expect(response.entry[0].resource.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomType\").toLowerCase() == \"textphone\") {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"    }\r",
									"});\r",
									"\r",
									"//Check Address Related items\r",
									"pm.test(\"Address has been mapped correctly\", function () {\r",
									"      \r",
									"      if (pm.variables.get(\"relatedPersonAddressLine\")) {\r",
									"          pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"relatedPersonAddressLine\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"relatedPersonPostalCode\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"      }\r",
									"      else \r",
									"          pm.expect(response.entry[0].resource.address).to.eql(undefined);\r",
									"    });\r",
									"\r",
									"//Check CorrespondenceIndicator Related items\r",
									"pm.test(\"CorrespondenceIndicator has been mapped correctly\", function () {\r",
									"    var CorrespondenseIndicator = getCorrespondenseIndicator();\r",
									"    \r",
									"    if ((pm.variables.get(\"relatedPersonCorrespondenceIndicator\") == \"no\") || (pm.variables.get(\"relatedPersonCorrespondenceIndicator\") === undefined)) {\r",
									"        pm.expect(CorrespondenseIndicator).to.eql(undefined);\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonCorrespondenceIndicator\") == \"yes\") {\r",
									"        pm.expect(CorrespondenseIndicator.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-CopyCorrespondenceIndicator\");\r",
									"        pm.expect(CorrespondenseIndicator.valueBoolean).to.eql(true);\r",
									"    }\r",
									"   else pm.expect.fail(\"Correspondence Indicator has not been mapped correctly\");\r",
									"});\r",
									"\r",
									"//Check Contact Preference \r",
									"pm.test(\"Contact Preferred Method has been mapped correctly\", function () {\r",
									"    var contactPreference = getContactPreference();\r",
									"    \r",
									"    if (contactPreference) {\r",
									"        pm.expect(contactPreference.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\");\r",
									"        pm.expect(contactPreference.extension[0].url).to.eql(\"PreferredContactMethod\");\r",
									"        \r",
									"        if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"email\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"4\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"E-mail\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"letter\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Letter\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"minicom\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"5\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Minicom (Textphone)\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"not telephone contact\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"8\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"No Telephone contact\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"sign language\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"7\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Sign Language\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"telephone\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"3\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Telephone\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"telephone via proxy\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"6\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Telephone contact via proxy\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"visit\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"2\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Visit\");\r",
									"        }\r",
									"        else pm.expect.fail(\"preferred contact method has not been mapped correctly\");\r",
									"\r",
									"        pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredContactMethod\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Contact Preferred Time has been mapped correctly\", function () {\r",
									"    var PreferredContactTimes = getContactPreferredTimes();\r",
									"    \r",
									"    if (pm.variables.get(\"relatedPersonPreferredContactTime\")) {\r",
									"        pm.expect(PreferredContactTimes.url).to.eql(\"PreferredContactTimes\");\r",
									"        pm.expect(PreferredContactTimes.valueString).to.eql(pm.variables.get(\"relatedPersonPreferredContactTime\"));\r",
									"    }\r",
									"    else if (!pm.variables.get(\"relatedPersonPreferredContactTime\")) {\r",
									"        pm.expect(PreferredContactTimes).to.eql(undefined)\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Contact Preferred Format has been mapped correctly\", function () {\r",
									"    var ContactPreferredCommsFormat = getContactPreferredCommsFormat();\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\")) {\r",
									"        pm.expect(ContactPreferredCommsFormat.url).to.eql(\"PreferredWrittenCommunicationFormat\");\r",
									"        pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\");\r",
									"        \r",
									"        if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Large print\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"11\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Large print\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Braille\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"12\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Braille\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Audio tape\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"13\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Audio tape\");\r",
									"        }\r",
									"        else pm.expect.fail(\"preferred contact format has not been mapped correctly\");\r",
									"    }\r",
									"    else if (!pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\")) {\r",
									"        pm.expect(ContactPreferredCommsFormat).to.eql(undefined)\r",
									"    }\r",
									"}); \r",
									"\r",
									"//Check language Related items\r",
									"pm.test(\"language Extention has been mapped correctly\", function () {\r",
									"    var languageExtension = getLanguageExtention(response.entry[0].resource.extension);\r",
									"    if (!pm.variables.get(\"relatedPersonLanguage\")) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    \r",
									"    else if (pm.variables.get(\"relatedPersonLanguage\")) {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"relatedPersonInterpreter\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"relatedPersonLanguage\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"relatedPersonLanguageDisplay\"));\r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Rank Extention has been mapped correctly\", function () {\r",
									"    var ContactRankExtension = getContactRankExtension(response.entry[0].resource.extension);\r",
									"\r",
									"    \r",
									"    if (!(pm.variables.get(\"relatedPersonRank1\"))) {\r",
									"        pm.expect(ContactRankExtension).to.eql(undefined);\r",
									"    }\r",
									"    \r",
									"    else if (pm.variables.get(\"relatedPersonRank\")) {\r",
									"        pm.expect(ContactRankExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactRank\");\r",
									"        pm.expect(ContactRankExtension.valuePositiveInt).to.eql(pm.variables.get(\"relatedPersonRank1\"));\r",
									"    }\r",
									"    \r",
									"});\r",
									"\r",
									"function getContactRankExtension(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"    \t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactRank\") {\r",
									"    \t\t\t\treturn extensions;\r",
									"    \t\t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getCorrespondenseIndicator(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"        \t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-CopyCorrespondenceIndicator\") {\r",
									"        \t\t\treturn extensions;\r",
									"        \t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"language\") {\r",
									"                        return extensions;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreference(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"    \t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactPreference\") {\r",
									"    \t\t\t\treturn extensions;\r",
									"    \t\t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreferredTimes(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"PreferredContactTimes\") {\r",
									"                        return e;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"            }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreferredCommsFormat(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"PreferredWrittenCommunicationFormat\") {\r",
									"                        return e;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.variables.unset(\"relatedPersonPrefix\");\r",
									"pm.variables.unset(\"relatedPersonSuffix\");\r",
									"pm.variables.unset(\"relatedPersonLanguage\");\r",
									"pm.variables.unset(\"relatedPersonPreferredContactTime\");\r",
									"pm.variables.unset(\"relatedPersonLanguageDisplay\");    \r",
									"pm.variables.unset(\"relatedPersonInterpreter\");   \r",
									"pm.variables.unset(\"relatedPersonRelationshipNOKCode\");\r",
									"pm.variables.unset(\"relatedPersonRelationshipNOKDisplay\");\r",
									"pm.variables.unset(\"relatedPersonRelationshipType\");\r",
									"pm.variables.unset(\"relatedPersonAddressLine\");\r",
									"pm.variables.unset(\"relatedPersonPreferredWrittenCommsFormat\");\r",
									"pm.variables.unset(\"relatedPersonPatientID\");\r",
									"\r",
									"};\r",
									"\r",
									"\r",
									"pm.globals.set(\"relatedPersonMappings\", relatedPersonMappings.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkSearchMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8c3754c8-f635-49c0-8324-002bbb81bfbf",
								"exec": [
									"/*functions*/\r",
									"var checkSearchMappings = () => {\r",
									"\r",
									"    /*Resource Type mapping function*/\r",
									"\r",
									"    pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*Patient id mapping function*/\r",
									"    pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*Identifier Value mapping function*/\r",
									"    pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*Meta version id mapping function\r",
									"    pm.test(\"Meta 'versionId' has been mapped correctly\", function () {\r",
									"        console.log(\"expected metaVersionId = \" + (pm.variables.get(\"metaVersionId\")));\r",
									"        console.log(\"returned metaVersionId = \" + (response.entry[0].resource.meta.versionId));\r",
									"        pm.expect(response.entry[0].resource.meta.versionId).to.eql(pm.variables.get(\"metaVersionId\"));\r",
									"        }\r",
									"    );*/\r",
									"\r",
									"    /*Check Name Related items*/\r",
									"\r",
									"    /*Check family has been populated properly*/\r",
									"    pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"    });\r",
									"\r",
									"    /*Check given has been populated properly*/\r",
									"    pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"    });\r",
									"\r",
									"    /*Check prefix has been populated properly*/\r",
									"    pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"    });\r",
									"\r",
									"    /*Check suffix has been populated properly*/\r",
									"    pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"suffix\") === undefined) {\r",
									"            pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"        }\r",
									"        else {\r",
									"            pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"        }\r",
									"        pm.variables.unset(\"suffix\");\r",
									"    }\r",
									"\r",
									"    );\r",
									"\r",
									"    /*Check name use has been populated properly*/\r",
									"    pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"temp\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"nickname\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"    });\r",
									"\r",
									"\r",
									"    /*Check name start date has been populated properly*/\r",
									"    pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"    });\r",
									"\r",
									"    // Check birth order is populated correctly\r",
									"    pm.test(\"Birth Order is returned\", () => {\r",
									"        if (pm.variables.has(\"expectedBirthOrder\")) {\r",
									"            pm.expect(response.entry[0].resource.multipleBirthInteger).to.eq(pm.variables.get(\"expectedBirthOrder\"));\r",
									"        }\r",
									"    });\r",
									"    pm.variables.unset(\"expectedBirthOrder\");\r",
									"\r",
									"    /*gender mapping function*/\r",
									"    pm.test(\"Gender has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"female\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"male\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"unknown\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"other\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"    });\r",
									"\r",
									"    /*Birthday mapping function*/\r",
									"    pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*deceasedDateTime mapping function*/\r",
									"    pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"        let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"        if (!deceasedDateTimeExists) {\r",
									"            pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(undefined);\r",
									"        }\r",
									"        else if (deceasedDateTimeExists) {\r",
									"            pm.expect((response.entry[0].resource.deceasedDateTime).substring(0, 10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"        }\r",
									"        pm.variables.unset(\"deceasedDateTime\");\r",
									"    });\r",
									"\r",
									"    /*Check Address Related items*/\r",
									"\r",
									"    /*address line mapping function*/\r",
									"    if (pm.variables.get(\"s-flagged\")) {\r",
									"        pm.test('Address is not displayed for Sensitive Patient', () => {\r",
									"            pm.expect(response.entry[0].resource.address).to.be.undefined;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Address has been mapped correctly\", function () {\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"addressLine\"));\r",
									"        }\r",
									"        );\r",
									"\r",
									"        // /*addressPeriodStart mapping function*/\r",
									"        pm.test(\"Address 'periodStart' has been mapped correctly\", function () {\r",
									"            pm.expect(response.entry[0].resource.address[0].period.start).to.eql((pm.variables.get(\"addressPeriodStart\")));\r",
									"        }\r",
									"        );\r",
									"\r",
									"        // /*addressPostCode mapping function*/\r",
									"        pm.test(\"Address 'PostCode' has been mapped correctly\", function () {\r",
									"            pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"));\r",
									"        }\r",
									"        );\r",
									"\r",
									"        // /*address.use mapping function*/\r",
									"        pm.test(\"Address 'Use' has been mapped correctly\", function () {\r",
									"            pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        );\r",
									"    }\r",
									"\r",
									"    /*telecom mapping function*/\r",
									"    if (pm.variables.get(\"s-flagged\")) {\r",
									"        pm.test(\"Telecom or Contact is not displayed for Sensitive Patient\", () => {\r",
									"            pm.expect(response.entry[0].resource.telecom).to.be.undefined;\r",
									"            pm.expect(response.entry[0].resource.contact).to.be.undefined;\r",
									"        })\r",
									"    } else {\r",
									"\r",
									"        if (pm.variables.get(\"telecomType\")) {\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"            /*telecom System mapping function*/\r",
									"\r",
									"            pm.test(\"Telecom 'System' has been mapped correctly\", function () {\r",
									"                let telecomType;\r",
									"                switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                    case 'telephone':\r",
									"                        telecomType = \"phone\";\r",
									"                        break;\r",
									"                    case 'fax':\r",
									"                    case 'email':\r",
									"                        telecomType = pm.variables.get(\"telecomType\");\r",
									"                        break;\r",
									"                    case 'textphone':\r",
									"                        telecomType = \"other\";\r",
									"                        break;\r",
									"                    default:\r",
									"                        pm.expect.fail(\"telecomType mapping failure\");\r",
									"                        break;\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.entry[0].resource.contact[0].telecom[0].system).to.eql(telecomType)\r",
									"\r",
									"\r",
									"\r",
									"                }\r",
									"\r",
									"                else {\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"                }\r",
									"\r",
									"\r",
									"                if (pm.variables.get(\"telecomType\").toLowerCase() == \"textphone\") {\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"                }\r",
									"            });\r",
									"\r",
									"\r",
									"            /*telecom use mapping function*/\r",
									"            pm.test(\"Telecom 'Use' has been mapped correctly\", function () {\r",
									"                let telecomUse;\r",
									"                switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                    case 'home':\r",
									"                    case 'answering machine':\r",
									"                    case 'emergency':\r",
									"                        telecomUse = \"home\";\r",
									"                        break;\r",
									"                    case 'work':\r",
									"                    case 'mobile':\r",
									"                        telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                        break;\r",
									"                    case 'pager':\r",
									"                        telecomUse = \"mobile\";\r",
									"                        break;\r",
									"                    case 'temporary':\r",
									"                        telecomUse = \"temp\";\r",
									"                        break;\r",
									"                    default:\r",
									"                        pm.expect.fail(\"telecomUse mapping failure\");\r",
									"                        break;\r",
									"                }\r",
									"                if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.entry[0].resource.contact[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                    pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].code).to.eql(\"C\");\r",
									"                    pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].display).to.eql(\"Emergency Contact\");\r",
									"                    pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].system).to.eql(\"http://terminology.hl7.org/CodeSystem/v2-0131\");\r",
									"                    pm.expect(response.entry[0].resource.contact[0].telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"                }\r",
									"                else {\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"                }\r",
									"            });\r",
									"        }\r",
									"        pm.variables.unset(\"telecomType\");\r",
									"        pm.variables.unset(\"telecomUse\");\r",
									"    }\r",
									"\r",
									"    /*generalPractitioner mapping function*/\r",
									"    if (pm.variables.get(\"s-flagged\")) {\r",
									"        pm.test('generalPractitioner is not displayed for Sensitive Patient', () => {\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner).to.be.undefined;\r",
									"        })\r",
									"    } else {\r",
									"        pm.test(\"generalPractitioner has been mapped correctly\", function () {\r",
									"            console.log(\"expected generalPractitionerValue = \" + (pm.variables.get(\"\")));\r",
									"            console.log(\"returned generalPractitionerValue = \" + (JSON.stringify(response.entry[0].resource.generalPractitioner)));\r",
									"            var generalPractitionerValueExists = (pm.variables.get(\"generalPractitionerValue\"));\r",
									"            if (!generalPractitionerValueExists) {\r",
									"                console.log(\"if generalPractitionerValue doesnt exist then there should be no generalPractice returned = \" + response.entry[0].resource.generalPractitioner);\r",
									"                pm.expect(JSON.stringify(response.entry[0].resource.generalPractitioner)).to.eql(undefined);\r",
									"            }\r",
									"            else if (generalPractitionerValueExists) {\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"            }\r",
									"            pm.variables.unset(\"generalPractitionerValue\");\r",
									"            pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"            pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"            pm.test(\"GeneralPractitioner has been mapped correctly\", () => {\r",
									"                if (pm.variables.get(\"s-flagged\") || !pm.variables.get(\"generalPractitionerValue\")) {\r",
									"                    console.log(\"this is a sensitive patient or the generalPractitionerValue has not been set therefore generalPractice should not be returned\");\r",
									"                    pm.expect(response.generalPractitioner).to.be.undefined;\r",
									"                } else {\r",
									"                    console.log(\"generalPractitionerValue has been set for the patient so generalPractitionerValue should be returned\");\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"                    pm.expect(response.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"                    pm.expect(response.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"                }\r",
									"\r",
									"                pm.variables.unset(\"generalPractitionerValue\");\r",
									"                pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"                pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"            });\r",
									"\r",
									"            /*nominatedPharmacy mapping function*/\r",
									"            pm.test(\"nominatedPharmacy has been mapped correctly\", function () {\r",
									"                let nominatedPharmacyExists = (pm.environment.get(\"nominatedPharmacy\"));\r",
									"                let nominatedPharmacyExtension = response.extension === undefined ? undefined : getNominatedPharmacy(response.extension);\r",
									"\r",
									"            });\r",
									"\r",
									"            /*extention items*/\r",
									"\r",
									"            /*DeathNotification Items*/\r",
									"\r",
									"            /*DeathNotification ValueDateTime mapping function*/\r",
									"            if (pm.variables.get(\"s-flagged\")) {\r",
									"                pm.test(\"DeathNotification is not displayed for a Sensitive patient\", () => {\r",
									"                    pm.expect(response.entry[0].resource.extension).to.equal(undefined);\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"DeathNotification has been mapped correctly\", function () {\r",
									"                    if (pm.variables.get(\"deathNotificationValueDateTime\") !== \"\") {\r",
									"                        pm.expect((response.entry[0].resource.extension[0].extension[1].valueDateTime).substring(0, 10)).to.eql((pm.variables.get(\"deathNotificationValueDateTime\")));\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"                    }\r",
									"                    else if (pm.variables.get(\"deathNotificationValueDateTime\") === \"\") {\r",
									"                        pm.expect(JSON.stringify(response.entry[0].resource.extension)).to.eql(undefined);\r",
									"                    }\r",
									"                });\r",
									"            }\r",
									"\r",
									"            pm.test(\"meta security object has been mapped correctly\", () => {\r",
									"                if (pm.variables.get('security.code')) {\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal(pm.variables.get('security.code'));\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted');\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"                } else {\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('U');\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('unrestricted');\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"                }\r",
									"\r",
									"                pm.variables.unset('security.code');\r",
									"            });\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.globals.set(\"checkSearchMappings\", checkSearchMappings.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkRetrieveMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5fe344f4-df79-4cbb-b9f4-ef2d866d191c",
								"exec": [
									"var checkRetrieveMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    pm.expect(response.identifier[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    \r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"// Check birth order is populated correctly\r",
									"pm.test(\"Birth Order is returned\", () => {\r",
									"    if (pm.variables.has(\"expectedBirthOrder\")) {\r",
									"        pm.expect(response.multipleBirthInteger).to.eq(pm.variables.get(\"expectedBirthOrder\"));\r",
									"    }\r",
									"});\r",
									"pm.variables.unset(\"expectedBirthOrder\");\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t\t \r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"prefix\")) {\r",
									"            pm.expect(response.name[0].prefix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"            pm.expect(response.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"    }\r",
									"    \r",
									"    pm.variables.unset(\"prefix\");\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"suffix\")) {\r",
									"        pm.expect(response.name[0].suffix).to.equal(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"// Check Meta.Security object is displayed for Sensitive Patients\r",
									"pm.test(\"Security object has been mapped correctly\", () => {\r",
									"    let securityCode = pm.variables.get(\"securityCode\");\r",
									"\r",
									"    if (securityCode) {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('R');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"});\r",
									"\r",
									"// Check deathNotificationExtension\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"deathNotificationStatus extension has been mapped correctly -  Only checked for a Sensitive Patient\", () => {\r",
									"        pm.expect(response.extension[0].extension[0].url).to.equal('deathNotificationStatus');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.equal('1', 'invalid code');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.equal(pm.variables.get(\"deathNotificationStatus.display\"));\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus', 'invalid system');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.equal('1.0.0', 'invalid version');\r",
									"        pm.expect(response.extension[0].url).to.equal('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus', 'invalid extension.url');\r",
									"    });\r",
									"}\r",
									"\r",
									"/*Check Address Related items*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Address for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Address has been mapped correctly\", function () {\r",
									"        let expectedValue;\r",
									"        switch (pm.variables.get(\"addressType\")) {\r",
									"            case 'usual':\r",
									"                expectedValue = 'home';\r",
									"                break;\r",
									"            case 'work':\r",
									"                expectedValue = 'work';\r",
									"                break;\r",
									"            case 'correspondence':\r",
									"                expectedValue = 'billing';\r",
									"                break;\r",
									"            case 'temporary':\r",
									"                expectedValue = 'temp';\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect.fail(\"addressType mapped incorrectly\");\r",
									"        }\r",
									"\r",
									"        pm.expect(response.address[0].use).to.eql(expectedValue, \"invalid addressType\");\r",
									"        pm.expect(JSON.stringify(response.address[0].line)).to.eql(pm.variables.get(\"addressLine\"), \"invalud addressLine\");\r",
									"        pm.expect(response.address[0].period.start).to.eql(pm.variables.get(\"addressPeriodStart\"), \"invalid addressPeriodStart\");\r",
									"        pm.expect(response.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"), \"invalid postalCode\");\r",
									"\r",
									"        let addressPeriodEnd = pm.variables.get(\"addressPeriodEnd\") === undefined ? undefined : pm.variables.get(\"addressPeriodEnd\");\r",
									"        pm.expect(response.address[0].period.end).to.eql(addressPeriodEnd, \"invalid addressPeriodEnd\");\r",
									"\r",
									"        if (response.address[0].extension !== undefined) {\r",
									"            let paf = response.address[0].extension[0].extension[0];\r",
									"\r",
									"            pm.test(\"Address PAF Key extension has been mapped correctly\", () => {\r",
									"                pm.expect(paf.url).to.equal('type', 'invalid url');\r",
									"                pm.expect(paf.valueCoding.code).to.equal('PAF', 'invalud valueCoding.code');\r",
									"                pm.expect(paf.valueCoding.system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/UKCore-AddressKeyType', 'invalid valueCoding.system');\r",
									"                pm.expect(response.address[0].extension[0].url).to.equal('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-AddressKey', 'invalid extension.url');\r",
									"            })\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.variables.unset(\"addressPeriodEnd\");\r",
									"}\r",
									"\r",
									"/*telecom mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom or Contact for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.telecom).to.be.undefined;\r",
									"        pm.expect(response.contact).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    if (pm.variables.get(\"telecomType\")) {\r",
									"        pm.test(\"Telecom System has been mapped correctly\", function () {\r",
									"            let telecomType;\r",
									"\r",
									"                switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                    case 'telephone':\r",
									"                        telecomType = \"phone\";\r",
									"                        break;\r",
									"                    case 'fax':\r",
									"                    case 'email':\r",
									"                        telecomType = pm.variables.get(\"telecomType\");\r",
									"                        break;\r",
									"                    case 'textphone':\r",
									"                        telecomType = \"other\";\r",
									"                        break;\r",
									"                    default:\r",
									"                        pm.expect.fail(\"telecomType mapping failure\");\r",
									"                        break;\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.contact[0].telecom[0].system).to.eql(telecomType)\r",
									"                }\r",
									"\r",
									"                else {\r",
									"                pm.expect(response.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomType\").toLowerCase() == \"textphone\") {\r",
									"                    pm.expect(response.telecom[0].extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"                }\r",
									"        });\r",
									"        pm.test(\"Telecom Use has been mapped correctly\", function () {    \r",
									"            let telecomUse;\r",
									"            switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                case 'home':\r",
									"                case 'answering machine':\r",
									"                    telecomUse = \"home\";\r",
									"                    break;\r",
									"                case 'work':\r",
									"                case 'mobile':\r",
									"                    telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                    break;\r",
									"                case 'pager':\r",
									"                    telecomUse = \"mobile\";\r",
									"                    break;\r",
									"                case 'temporary':\r",
									"                    telecomUse = \"temp\";\r",
									"                    break;\r",
									"            }\r",
									"            if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                pm.expect(response.contact[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].code).to.eql(\"C\");\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].display).to.eql(\"Emergency Contact\");\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].system).to.eql(\"http://terminology.hl7.org/CodeSystem/v2-0131\");\r",
									"                pm.expect(response.contact[0].telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            }\r",
									"            else {\r",
									"                pm.expect(response.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"                pm.expect(response.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            } \r",
									"        });\r",
									"    }\r",
									"    pm.variables.unset(\"telecomType\");\r",
									"    pm.variables.unset(\"telecomUse\");\r",
									"  }\r",
									"\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"pm.test(\"GeneralPractitioner has been mapped correctly\", () => {\r",
									"    if (pm.variables.get(\"s-flagged\") || !pm.variables.get(\"generalPractitionerValue\")) {\r",
									"        console.log(\"this is a sensitive patient or the generalPractitionerValue has not been set therefore generalPractice should not be returned\");\r",
									"        pm.expect(response.generalPractitioner).to.be.undefined;\r",
									"    } else {\r",
									"        console.log(\"generalPractitionerValue has been set for the patient so generalPractitionerValue should be returned\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(response.generalPractitioner[0].reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"generalPractitionerValue\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"});\r",
									"\r",
									"/*nominatedPharmacy mapping function*/\r",
									"pm.test(\"nominatedPharmacy has been mapped correctly\", function () {\r",
									"    let nominatedPharmacyExists = (pm.variables.get(\"nominatedPharmacy\"));\r",
									"    let nominatedPharmacyExtension = response.extension === undefined ? undefined : getNominatedPharmacy(response.extension);\r",
									"\r",
									"    if (!nominatedPharmacyExists) {\r",
									"        pm.expect(nominatedPharmacyExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"nominatedPharmacy has been set for the patient so nominatedPharmacy should be returned\");\r",
									"        pm.expect(nominatedPharmacyExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"nominatedPharmacy\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\",\"invalid system\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"nominatedPharmacy\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"nominatedPharmacy\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodStart\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodEnd\");\r",
									"});\r",
									"\r",
									"\r",
									"/*dispensingDoctor mapping function*/\r",
									"pm.test(\"dispensingDoctor has been mapped correctly\", function () {\r",
									"    let dispensingDoctorExtension = response.extension === undefined ? undefined : getDispensingDoctor(response.extension);\r",
									"    let dispensingDoctorExists = pm.variables.get(\"dispensingDoctor\");\r",
									"\r",
									"    if (!dispensingDoctorExists) {\r",
									"        pm.expect(dispensingDoctorExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"dispensingDoctor has been set for the patient so dispensingDoctor should be returned\");\r",
									"        pm.expect(dispensingDoctorExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"dispensingDoctor\"));\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"dispensingDoctor\")));\r",
									"    }\r",
									"    pm.variables.unset(\"dispensingDoctor\");\r",
									"    pm.variables.unset(\"dispensingDoctorPeriodStart\");\r",
									"});\r",
									"\r",
									"/*medicalApplianceSupplier mapping function*/\r",
									"pm.test(\"medicalApplianceSupplier has been mapped correctly\", function () {\r",
									"    let medicalApplianceSupplierExtension = response.extension === undefined ? undefined : getMedicalApplianceSupplier(response.extension);\r",
									"    let medicalApplianceSupplierExists = pm.variables.get(\"medicalApplianceSupplier\");\r",
									"\r",
									"    if (!medicalApplianceSupplierExists) {\r",
									"        pm.expect(medicalApplianceSupplierExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"medicalApplianceSupplier has been set for the patient so medicalApplianceSupplier should be returned\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"medicalApplianceSupplier\"));\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.reference).to.eql(\"https://directory.spineservices.nhs.uk/STU3/Organization/\" + (pm.variables.get(\"medicalApplianceSupplier\")));\r",
									"    }\r",
									"    pm.variables.unset(\"medicalApplianceSupplier\");\r",
									"    pm.variables.unset(\"medicalApplianceSupplierPeriodStart\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"language Extention has been mapped correctly\", () => {\r",
									"    let languageExtension = response.extension === undefined ? undefined : getLanguageExtention(response.extension);\r",
									"    let language = pm.variables.get(\"language\");\r",
									"\r",
									"    if (!language) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"language\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"languageDisplay\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"interpreter\"));\r",
									"        pm.expect(languageExtension.url).to.equal('https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NHSCommunication', 'invalid url');\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"language\");\r",
									"    pm.variables.unset(\"languageDisplay\");\r",
									"    pm.variables.unset(\"interpreter\");\r",
									"\r",
									"});\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    for (let extensions of response.extension) {\r",
									"        try {\r",
									"                for (let e of extensions.extension) {\r",
									"                    if (e.url == \"language\") {\r",
									"                    console.log(e);\r",
									"                    return extensions;\r",
									"                    }       \r",
									"                 }\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"}\r",
									"\r",
									"\r",
									"function getDispensingDoctor(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\") {\r",
									"\t\t\t\t\t\tconsole.log(\"dispensingDoctorExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"function getNominatedPharmacy(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\") {\r",
									"\t\t\t\t\t\tconsole.log(\"nominatedPharmacyExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"function getMedicalApplianceSupplier(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t    console.log(extensions)\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"\t\t\t\t\t\tconsole.log(\"medicalApplianceSupplierExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"};       \r",
									"\r",
									"pm.variables.set(\"s-flagged\",false);\r",
									"pm.globals.set(\"checkRetrieveMappings\", checkRetrieveMappings.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "HL7RetrieveResponseChecks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8185cd63-6487-4212-9b2f-e0e7c267ac5f",
								"exec": [
									"/*HL7 Retrieve Response Checks: Provides tests to assert against HL7 Retrieve responses\r",
									"=======================================================================================*/\r",
									"\r",
									"pm.globals.set('HL7ResponseValidator', function HL7ResponseValidator() {\r",
									"\r",
									"    let response = pm.globals.get(\"HL7RetrieveResponse\");\r",
									"    let message = {};\r",
									"    \r",
									"    /*check GeneralPractice has been populated correctly*/\r",
									"        message.assertHL7GeneralPracticeIs = (gp) => {\r",
									"        pm.test(\"Check HL7 Response General Practice = \" + gp, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.code.$.code).to.eql(gp);\r",
									"        });\r",
									"    }\r",
									"        message.assertHL7GeneralPracticeCodeIs = (gpValue) => {\r",
									"        pm.test(\"Check HL7 Response General Practice Code = \" + gpValue, () => {\r",
									"             pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.performer.assignedEntity.id.$.extension).to.eql(gpValue);\r",
									"        });\r",
									"    }\r",
									"        message.assertHL7GeneralstartDateIs = (startDate) => {\r",
									"        pm.test(\"Check HL7 Response General Practice startDate = \" + startDate, () => {\r",
									"             pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.effectiveTime.low.$.value).to.eql(startDate);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Gender has been populated correcty*/\r",
									"    message.assertHL7GenderIs = (Gender) => {\r",
									"        pm.test(\"Check HL7 Response Gender = \" + Gender, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000209UK01.PartAdminGenderCode\"].partPerson.administrativeGenderCode.$.code).to.eql(Gender);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoB has been populated correcty*/\r",
									"    message.assertHL7DateOfBirthIs = (DOB) => {\r",
									"        pm.test(\"Check HL7 Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000210UK01.PartBirthTime\"].partPerson.birthTime.$.value).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"\r",
									"    /*check the DoD has been populated correcty*/\r",
									"    message.assertHL7DateOfDeathIs = (DOD) => {\r",
									"        pm.test(\"Check HL7 Response Date of Death = \" + DOD, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000211UK01.PartDeceasedTime\"].partPerson.deceasedTime.$.value).to.eql(DOD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification Date has been populated correcty*/\r",
									"    message.assertHL7DeathNotificationDateIs = (DND) => {\r",
									"        pm.test(\"Check HL7 Response Death Death Notification Date = \" + DND, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000211UK01.PartDeceasedTime\"].subjectOf.notificationTime.value.$.value).to.eql(DND)\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification has been populated correcty*/\r",
									"    message.assertHL7DeathNotificationIs = (DN) => {\r",
									"        pm.test(\"Check HL7 Response Death Notification  = \" + DN, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.subjectOf2.deathNotification.code.$.code).to.eql(DN)\r",
									"        });\r",
									"    }\r",
									"    return message;\r",
									"\r",
									"} + '; HL7ResponseValidator();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PDSUpdateResponseChecks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6abe224-8b63-4c28-ba81-fa7f0da6113f",
								"exec": [
									"/*HL7 Retrieve Response Checks: Provides tests to assert against HL7 Retrieve responses\r",
									"=======================================================================================*/\r",
									"\r",
									"pm.globals.set('PDSUpdateResponseValidator', function PDSUpdateResponseValidator() {\r",
									"\r",
									"    var response = pm.variables.get(\"pdsUpdateResponse\");\r",
									"    let message = {};\r",
									"   \r",
									"        /*check the DoB has been populated correcty*/\r",
									"    message.assertDateOfBirthHasBeenUpdated = (DOB) => {\r",
									"        pm.test(\"PDS Update Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response.birthDate).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the PoB has been populated correcty*/\r",
									"    message.assertPlaceOfBirthHasBeenUpdated = (POB) => {\r",
									"        const extensions = response.hasOwnProperty(\"extension\") ? response['extension'] : [];\r",
									"        let actualBirthPlaceInfo = extensions.filter(x => x.url.includes(\"birthPlace\"));\r",
									"        pm.test(\"Check PDS Update Response for Place of Birth\", () => {\r",
									"            // Check there are no duplications\r",
									"            pm.expect(actualBirthPlaceInfo.length).to.eq(1);\r",
									"\r",
									"            // Check the actual value is the same as the expected value\r",
									"            pm.expect(JSON.stringify(actualBirthPlaceInfo[0])).to.eq(JSON.stringify(POB));;\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // Check place of birth has been remmoved\r",
									"    message.assertPlaceOfBirthHasBeenRemoved = () => {\r",
									"        const extensions = response.hasOwnProperty(\"extension\") ? response['extension'] : [];\r",
									"        let actualBirthPlaceInfo = extensions.filter(x => x.url.includes(\"birthPlace\"));\r",
									"    \r",
									"        pm.test(\"PDS Place of Birth has been removed\", () => {\r",
									"            pm.expect(actualBirthPlaceInfo[0]).to.eq(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"   // check the General Practice has been populated correctly\r",
									"    message.assertGeneralPracticeIs = (gpValue) => {\r",
									"        pm.test(\"PDS Update Response General Practice has been updated \" + gpValue, () => {\r",
									"            pm.expect(response.generalPractitioner[0].identifier.value).to.eql(gpValue);         \r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertGeneralPracticeStartDate = (StartDate) => {\r",
									"        pm.test(\"PDS Update Response General Practice Start Date \" + StartDate, () => {\r",
									"            pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql(StartDate);         \r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Gender has been populated correcty*/\r",
									"    message.assertGenderHasBeenUpdated = (Gender) => {\r",
									"        pm.test(\"PDS Update Response Gender = \" + Gender, () => {\r",
									"            pm.expect(response.gender).to.eql(Gender);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoB has been populated correcty*/\r",
									"    message.assertDateOfBirthHasBeenUpdated = (DOB) => {\r",
									"        pm.test(\"PDS Update Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response.birthDate).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoD has been populated correcty*/\r",
									"    message.assertDateOfDeathHasBeenUpdated = (DOD) => {\r",
									"        pm.test(\"PDS Update Response Date of Death = \" + DOD, () => {\r",
									"            pm.expect(response.deceasedDateTime.substr(0, 10)).to.eql(DOD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification has been populated correcty*/\r",
									"    message.assertDeathNotificationHasBeenUpdated = () => {\r",
									"        pm.test(\"PDS Update Death Notification has been updated\", () => {\r",
									"            pm.expect(response.extension[0].url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"            pm.expect(response.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"            pm.expect(response.extension[0].extension[1].valueDateTime.substr(0, 10)).to.eql(pm.globals.get(\"deathNotificationDateAndTime\").substr(0, 10));\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Meta Version Id has been populated correcty*/\r",
									"    message.assertVersionIdHasBeenUpdated = () => {\r",
									"        pm.test(\"PDS Update VersionId has been updated\", () => {\r",
									"            let versionId = pm.globals.get(\"versionId\") + 1;\r",
									"            pm.expect(response.meta.versionId).to.eql(JSON.stringify(versionId));\r",
									"        });\r",
									"    }\r",
									"\r",
									"        /*check the NominatedPharmacy has been populated correcty*/\r",
									"    let nominatedPharmacy = getNominatedPharmacy(response.extension);\r",
									"\r",
									"\r",
									"    message.assertNominatedPharmacyHasBeenUpdated = (expectedResponseNP) => {\r",
									"        pm.test(\"Check PDS Update Response nominatedPharmacy is correct\", () => {\r",
									"            pm.expect(nominatedPharmacy).to.eql(expectedResponseNP);\r",
									"        });\r",
									"    }\r",
									"   \r",
									"    message.assertNominatedPharmacyHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response nominatedPharmacy has been removd\", () => {\r",
									"            pm.expect(nominatedPharmacy).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getNominatedPharmacy(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-NominatedPharmacy\") {\r",
									"                            console.log(\"nominatedPharmacyExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"\r",
									"   /*check the MedicalApplianceSupplier has been populated correcty*/\r",
									"    let MedicalApplianceSupplier = getMedicalApplianceSupplier(response.extension);\r",
									"\r",
									"    message.assertMedicalApplianceSupplierHasBeenUpdated = (expectedResponseMAS) => {\r",
									"        pm.test(\"Check PDS Update Response MedicalApplianceSupplier is correct\", () => {\r",
									"            pm.expect(MedicalApplianceSupplier).to.eql(expectedResponseMAS);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertMedicalApplianceSupplierHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response MedicalApplianceSupplier has been removd\", () => {\r",
									"            pm.expect(MedicalApplianceSupplier).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getMedicalApplianceSupplier(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"                            console.log(\"MedicalApplianceSupplierExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"\r",
									"   /*check the DispensingDoctor has been populated correcty*/\r",
									"    let DispensingDoctor = getDispensingDoctor(response.extension);\r",
									"\r",
									"    message.assertDispensingDoctorHasBeenUpdated = (expectedResponseDD) => {\r",
									"        pm.test(\"Check PDS Update Response DispensingDoctor is correct\", () => {\r",
									"            pm.expect(DispensingDoctor).to.eql(expectedResponseDD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertDispensingDoctorHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response DispensingDoctor has been removd\", () => {\r",
									"            pm.expect(DispensingDoctor).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getDispensingDoctor(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\") {\r",
									"                            console.log(\"DispensingDoctorExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"    return message;\r",
									"\r",
									"} + '; PDSUpdateResponseValidator();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PDSUpdateMessageRetrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68f0defe-83fe-4bf2-bb96-c27c14e7ce18",
								"exec": [
									"/*This function sets the contentLoaction from an Update Request response and then uses it to make a call to the message polling service\r",
									"to retrieve the Update Response and save the response as a variable for subsequent tests*/\r",
									"\r",
									"/* This function sets the contentLoaction from an Update Request response and then uses it to make a call to the message polling service\r",
									"to retrieve the Update Response and save the response as a variable for subsequent tests */\r",
									"\r",
									"pm.globals.set('PDSUpdateMessageRetrieve', function updateResponse() {\r",
									"    let methods = {};\r",
									"\r",
									"    // need to remove verifyErrorMsg param as it's no longer required\r",
									"    methods.retrieveMessage = (response, expectedErrorResponse) => {\r",
									"        let contentLocation = response.headers.get('Content-Location');\r",
									"\r",
									"        setTimeout(() => {\r",
									"            var Header = require('postman-collection').Header;\r",
									"            let asidHeader = pm.environment.get(\"asidHeader\");\r",
									"            let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
									"            let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
									"            let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"\r",
									"            pm.sendRequest({\r",
									"                url: pm.environment.get(\"environment\") + contentLocation,\r",
									"                method: 'GET',\r",
									"                header: {\r",
									"                    authorization,\r",
									"                    asidHeader,\r",
									"                    sessionURIDHeader,\r",
									"                    identityUUIDHeader,\r",
									"                },\r",
									"\r",
									"            }, function (err, response) {\r",
									"                if (err) {\r",
									"                    console.warn('UpdateMessageRetrieve', err)\r",
									"                    throw new Error(\"An error occurred calling the polling endpoint\");\r",
									"                }\r",
									"\r",
									"                expectedErrorResponse ? validatePollingErrorResponse(response) : validatePollingMessage(response);\r",
									"            });\r",
									"        }, 1000);\r",
									"    }\r",
									"    return methods;\r",
									"\r",
									"    function validatePollingErrorResponse(response) {\r",
									"        pm.test(\"Check Polling Message Service does not Return Status code 200 for Error Response\", function () {\r",
									"            pm.expect(response.code).not.equal(200);\r",
									"            pm.variables.set(\"pdsUpdateErrorResponse\", response.json())\r",
									"            pm.variables.set(\"pdsUpdateErrorResponseCode\", response.code)\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function validatePollingMessage(response) {\r",
									"        pm.test(\"Check Polling Message Service Returns Status code 200\", function () {\r",
									"            pm.expect(response.code).to.equal(200);\r",
									"            pm.variables.set(\"pdsUpdateResponse\", response.json())\r",
									"            console.log(\"update Response set\")\r",
									"            console.log(pm.variables.get(\"pdsUpdateResponse\"))\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check PDS Update VersionId has been updated\", function () {\r",
									"            let versionId = pm.variables.get(\"versionId\") + 1;\r",
									"            pm.expect(response.json().meta.versionId).to.eql(JSON.stringify(versionId));\r",
									"            pm.globals.set(\"metaVersionId\", response.headers.get('Etag'));\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().meta.versionId));\r",
									"        })\r",
									"    }\r",
									"} + '; updateResponse();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Search",
					"item": [
						{
							"name": "Simple Search",
							"item": [
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b711567d-d7ce-4160-a390-1eed368d644a",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													"pm.variables.set(\"expectedBirthOrder\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eb9f7b54-c546-43a8-9bc7-365ebcca6350",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9cb4a3e5-a7dc-4db9-83df-6dcf3309a2c4",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Alias\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"1990-10-10\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Dr\");",
													"pm.variables.set(\"nameType\", \"alias\");",
													"pm.variables.set(\"addressType\", \"work\");",
													"pm.variables.set(\"telecomType\", \"fax\");",
													"pm.variables.set(\"telecomUse\", \"work\");",
													"pm.variables.set(\"given\", [\"John\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"bt Global services\",\"1 sovereign Street\",\"leeds\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"postalCode\", \"LS14BT\");",
													"pm.variables.set(\"patientId\", \"5900007820\");",
													"pm.variables.set(\"metaVersionId\", \"21\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"2342424234\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "26fa74bf-4ac5-4614-b218-fd1b60cfe457",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b203b684-61e7-48e6-b145-f9564ad75b9d",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Unknown\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2001-02-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lady\");",
													"pm.variables.set(\"nameType\", \"preferred\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"textphone\");",
													"pm.variables.set(\"telecomUse\", \"pager\");",
													"pm.variables.set(\"given\", [\"person\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 westwood\",\"bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"postalCode\", undefined);",
													"pm.variables.set(\"patientId\", \"5900007073\");",
													"pm.variables.set(\"metaVersionId\", \"4\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cf4b76a6-120d-44f9-a89e-9cd61ec71847",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8941bf70-9460-4f5e-b0b4-a8a7fdf431e8",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ea9ea860-be65-4aa9-b9c9-c856cf5afd69",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"previous\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2008-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lord\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"email\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"someone\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"15 westwood ave\",\"eccleshill\",\"Bradford\",\"west yorkshire\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900019241\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "243ccf29-667b-4cf1-b417-96fe417fed35",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c14a6c0-7620-4f3f-b047-c21b4a58c7b2",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"temporary\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2004-03-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Miss\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"mobile\");",
													"pm.variables.set(\"given\", [\"ned\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900008290\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09000000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08f071ff-d40a-46a8-8721-9b16050a3fc6",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0a5532b3-05d6-44cc-9433-e3c0caff06c5",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mister\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"2009-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mr\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"temporary\");",
													"",
													"pm.variables.set(\"given\", [\"Any\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900005798\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69890f56-80a6-4741-820d-e36be637e69c",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90a1f4b8-b1f3-433e-a060-89220ee259bd",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Answermachine\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2007-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mrs\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"Answering Machine\");",
													"",
													"pm.variables.set(\"given\", [\"another\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"27 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900000605\");",
													"pm.variables.set(\"metaVersionId\", \"5\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09234567\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Answering Machine\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a58ac28-b97a-4bd7-9563-3e9911e1cf7d",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b5d1eeb7-d5a9-4d72-822e-f03921c9e110",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Emergency\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2004-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"Emergency\");",
													"",
													"pm.variables.set(\"given\", [\"Emma\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"91 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900013863\");",
													"pm.variables.set(\"metaVersionId\", \"2\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000001\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Emergency\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & DOD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f729fe0c-3c1c-431a-b473-daba093457e1",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "37633808-70ed-4590-a486-d074ad960f20",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family, DOD & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4a4ec706-26e2-4f2c-a6fe-e97dd0f97dbd",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6161ed3d-d9bb-4fac-97c9-f8f337eb78c5",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d5c46a4e-ae6d-4069-b9d1-b87a65938234",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ac72a95-01c7-4ebf-af5f-53733f66d5d9",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - Postcode Matching",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe1c02fb-c840-4620-9af4-582b95f3cc38",
												"exec": [
													"pm.variables.set(\"testData\", testData = [",
													"    {",
													"        test: 'No Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01'",
													"    },",
													"    {",
													"        test: 'Correct Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP'",
													"    },",
													"    {",
													"        test: 'Incorrect Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3P2'",
													"    },",
													"    {",
													"        test: 'Correct Postcode & GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP&general-practitioner=Y00007'",
													"    },",
													"    {",
													"        test: 'Incorrect Postcode & Correct GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3P1&general-practitioner=Y00007'",
													"    },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "20c04e67-52e8-43cc-afd4-53f0ac0d64ec",
												"exec": [
													"let testScenarios = pm.variables.get('testData');",
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"testScenarios.forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        pm.expect(res.code).to.equal(200, 'invalid status code returned');",
													"",
													"",
													"        if (scenario.test.includes('Incorrect')) {",
													"            pm.test(scenario.test + \" Returns 0 Patients\", () => {",
													"                pm.expect(res.json().total).to.equal(0);",
													"                pm.expect(res.json().entry).to.be.undefined;",
													"            })",
													"",
													"        } else {",
													"            pm.test(scenario.test + \" Returns Patient 5900006433\", () => {",
													"                pm.expect(res.json().entry[0].resource.id).to.equal('5900006433');",
													"            })",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "NHS Number: 5900006433\n\n\nValidate that simple search takes into account address-postcode, when performing a search so that;\n- Simple search which includes postcode where all query parameters match a patient then the Patients record is returned\n- Simple search which includes postcode where all query parameters apart from postcode matches a patient record then No Patient is returned\n- Simple search which includes general-practitioner and postcode where all query parameters match a patient then the Patients record is returned\n- Simple search which includes general-practitioner and postcode where all query parameters apart from postcode matches a patient record then No Patient is returned"
									},
									"response": []
								},
								{
									"name": "Simple Search - GP Matching",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "af74516b-ce76-4559-a6d4-b77629896b7f",
												"exec": [
													"pm.variables.set(\"testData\", testData = [",
													"    {",
													"        test: 'No GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01'",
													"    },",
													"    {",
													"        test: 'Correct GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&general-practitioner=Y00007'",
													"    },",
													"    {",
													"        test: 'Incorrect GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&general-practitioner=Y00001'",
													"    },",
													"    {",
													"        test: 'Incorrect GP & correct Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP&general-practitioner=Y00001'",
													"    },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "277c785a-674b-4716-b594-6991eb4f20ec",
												"exec": [
													"let testScenarios = pm.variables.get('testData');",
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"testScenarios.forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        pm.expect(res.code).to.equal(200, 'invalid status code returned');",
													"",
													"",
													"        if (scenario.test.includes('Incorrect')) {",
													"            pm.test(scenario.test + \" Returns 0 Patients\", () => {",
													"                pm.expect(res.json().total).to.equal(0);",
													"                pm.expect(res.json().entry).to.be.undefined;",
													"            })",
													"",
													"        } else {",
													"            pm.test(scenario.test + \" Returns Patient 5900006433\", () => {",
													"                pm.expect(res.json().entry[0].resource.id).to.equal('5900006433');",
													"            })",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "NHS Number: 5900006433\n\nValidate that simple search takes into account general-practitioner, when performing a search so that;  \n- Simple search which includes general-practitioner where all query parameters match a patient then the Patients record is returned\n- Simple search which includes general-practitioner where all query parameters apart from postcode matches a patient record then No Patient is returned\n- Simple search which includes general-practitioner and postcode where all query parameters apart from general-practitioner matches a patient record then No Patient is returned"
									},
									"response": []
								},
								{
									"name": "Simple Search - Sensitive Patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bfe4f362-e359-4493-9e95-661651583e67",
												"exec": [
													"/*set variables for test*/",
													"pm.variables.set(\"s-flagged\", true);",
													"",
													"pm.variables.set(\"family\", \"Middleton\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2000-01-01\");",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"pm.variables.set(\"prefix\", \"Baroness\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Cynthia\",\"Cindy\"]);",
													"pm.variables.set(\"suffix\", [\"Brnss\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-31\");",
													"pm.variables.set(\"patientId\", \"5900018512\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"deceasedDateTime\", \"2009-05-01\");",
													"pm.variables.set(\"security.code\", \"R\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "16206e0a-f089-46a3-adfe-02151ef5e658",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"pm.variables.set(\"s-flagged\", false);",
													"pm.variables.unset(\"security.code\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Historic Search",
							"item": [
								{
									"name": "Historic Search - search with wildcarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ed11c001-eb88-48f2-9b40-11121c71e0d7",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\",  undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6313f01-762e-4f88-8e2a-3716a2e59366",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'family' name will return the patient with current name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fc8c23a6-a5fb-489c-977a-5bec486e7966",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fa952a56-d069-440a-b487-47eae746e0b0",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{family}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{family}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given and historic name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c4b19f9a-901f-4788-abfc-93cf4d663bc5",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ba0037a1-1482-455e-8f1c-5ffc9197adaf",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' and 'family' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b256582-092e-41ea-888e-044cdf1e1d60",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8083144e-a060-4243-ab23-0c71bc1bb729",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'family' name will return the patient with current 'family' name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fc00565f-d403-4896-978f-415e75e4f06b",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "047548fe-19da-428d-bef0-c018e3f5f8c9",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&given={{historicGiven}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "given",
													"value": "{{historicGiven}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildcarded Historic given and family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a152d5ee-ad6b-4c7c-8080-60a4cca0b67c",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b06911a8-a036-4560-b5a3-95ad82e84512",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Advanced Search",
							"item": [
								{
									"name": "date range tests",
									"item": [
										{
											"name": "DOD Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOD between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "cbba3881-8880-4040-a3fd-ff3f667cbd88",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cf91cc59-0b09-4167-a554-6f35b1294c97",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOD falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ef7da06a-6816-464d-8071-fbdc072b71ad",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b98e620e-d129-45fd-bf57-db8066245a3f",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "66a07c81-69bd-451c-81de-0738b49031ff",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-02&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c6e32966-d273-4a3a-ae01-79f6a68ea8ea",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "41cf6b56-034b-4311-9613-2756dbf7feef",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-03&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "39bcc2a8-a8f6-42ec-be29-2e54b7285cc8",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4557b8c8-0aa7-4e1e-b8ba-1afbdf831354",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6bedb553-5f20-45c9-9e7c-2ce5fc45f203",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "DOB Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOB between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "00fc5b9f-ec2e-4760-8a1f-8cf08394335b",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "381b8f5d-2268-4670-aafd-16737d0321a6",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "643f6eb0-e96c-4732-8a9c-a0abd1efec24",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "8645ddb5-23a4-43d9-a8c8-6dfa6cb194fe",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "0354f374-de63-4991-9b44-0505e4f3b8b8",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2010-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "012d1196-dcd2-4437-900b-9c9f2c186947",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3a0d85ce-7ea3-4698-a317-3e414df43187",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-02&birthdate=le2011-01-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "257929d9-124f-4fed-acc7-21d703a9c07d",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c393ae48-355a-4365-89b9-477fd16a37f4",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2009-12-31\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2ce04a12-282b-4dd8-af12-38f1b28f2e11",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "exact-match",
									"item": [
										{
											"name": "All patients are returned when search query matches many patients all with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5961bcb5-e29f-4d2c-8afa-30b5647c5e65",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns all patients with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    scores.forEach(score => {",
															"        pm.expect(score).to.equal(1);        ",
															"    });",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2020-02-11&family=length&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns all patients from a search which matched multiple patients all with a score =1"
											},
											"response": []
										},
										{
											"name": "Only patients with a score of 1 are returned when search query matches many patients",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0aaabec4-0dfa-4d3d-96b1-83e8c5c12079",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 1 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    pm.expect(scores).to.have.lengthOf(1);",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to true returns only those patients with a score of 1 from a search which matched multiple patients with scores >0 and <=1"
											},
											"response": []
										},
										{
											"name": "0 patients are returned when search query matches 0 patients with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eac671ba-d5e3-43b3-a363-0662b4f37cf7",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 0 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "len*"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns 0 patients from a search which matched multiple patients all with a score <1"
											},
											"response": [
												{
													"name": "0 patients returned respose",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_exact-match",
																	"value": "true"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "len*"
																},
																{
																	"key": "gender",
																	"value": "male"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:01:42 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "123"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Etag",
															"value": "\"484cd9e73bb551f9156572bd7c3379a45d286549\""
														}
													],
													"cookie": [],
													"body": "{\n    \"entry\": [],\n    \"resourceType\": \"Bundle\",\n    \"timestamp\": 1582794102,\n    \"total\": 0,\n    \"type\": \"searchset\"\n}"
												}
											]
										},
										{
											"name": "Exact match as false returns all matched patients regardless of score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f84aa278-f03e-495c-bbe8-91dc331a140b",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"var scores = util.getScores();    ",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 3 patients in total\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(3);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score < 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "99a912e0-47a6-40c3-bc1d-9dab559e3429",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to false returns all patients from a search matching multiple patients with scores > 0 and <=1"
											},
											"response": []
										}
									],
									"description": "Every result includes a score from 0 to 1.\n\nScores less than 1 can happen when parameters supplied do not exactly match the values on the patient record. Results are sorted best-first. You can request to only return exact matches (score = 1) using the _exact-match parameter.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67389f47-300f-4df6-b8c6-2dcd33e22712",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a35c111-33da-4a68-b324-5f9cfbb8ba9e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fuzzy-match",
									"item": [
										{
											"name": "Mismatching General Practitioner reduces match score against search without General Practitioner",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0291f5c6-32c8-4627-9bef-678b5c2bb197",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "668f7227-736a-4ded-baf8-a4b5534b6093",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900002365\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900002365');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy&general-practitioner=A200",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														},
														{
															"key": "general-practitioner",
															"value": "A200"
														}
													]
												},
												"description": "Validates a mismatching General Practitioner reduces the amtch score against the same search without General Practitioner"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles transposed family names",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "44381e63-e65b-4222-adbc-e610d55ca5b6",
														"exec": [
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"// Send request with _fuzzy-match=false to make sure no patients are returned",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + '/Patient?_fuzzy-match=false&family=James&birthdate=2000-01-01&given=David&gender=male',",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    pm.test('@Before: fuzzy-match set to false returns 0 patients', () => {",
															"        console.log('@Before Request: ' + JSON.stringify(res.json()));",
															"        pm.expect(res.json().total).to.equal(0);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1fcaf6fe-b0db-49cc-bf1e-8723907f3b8f",
														"exec": [
															"var response = pm.response.json().entry[0];",
															"",
															"pm.test('@Ater: fuzzy-match set to true returns status code 200', () =>{",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('Returns 1 patient', () => {",
															"    pm.expect(pm.response.json().total).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900004171\", () =>{",
															"   pm.expect(response.resource.id).to.equal('5900004171');",
															"});",
															"",
															"pm.test(\"Returns patient with family name 'David'\", () => {",
															"    pm.expect(response.resource.name[0].family).to.equal(\"David\");",
															"});",
															"",
															"pm.test(\"Returns patient with given name 'James'\", () => {",
															"    pm.expect(response.resource.name[0].given).to.contain('James');",
															"});",
															"",
															"pm.test(\"Returns patient with birthdate=2000-01-01\", () =>{",
															"    pm.expect(response.resource.birthDate).to.equal('2000-01-01');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "James"
														},
														{
															"key": "birthdate",
															"value": "2000-01-01"
														},
														{
															"key": "given",
															"value": "David"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "If no patients are matched, using fuzzy-match a check is performed for transposed names such as Adam Thomas and Thomas Adam (family and given names). This test asserts that when doing a fuzzy-match search, patients with transposed names are successfully matched"
											},
											"response": []
										},
										{
											"name": "Mismatching Date of Death reduces match score against same search without Date of Death",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3fd91986-4ea9-4fe6-afa9-15ecb4aeb1d0",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "25669026-2d8f-48e9-b16b-6925b7c482ed",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let initialScore = pm.variables.get(\"initialScore\");",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(initialScore).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&death-date=2020-02-01&family=length&birthdate=2020-02-11&given=Selena",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "death-date",
															"value": "2020-02-01"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "given",
															"value": "Selena"
														}
													]
												},
												"description": "Validate that a fuzzy-search using a mismatching date of death reduces the match score against the same search without a date of death"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles family name homophone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bfa6f3c8-f96b-4c22-888f-3702a495069c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bda0265c-d1ca-4317-9dbc-7f5671d2ea27",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns 3 patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.eql(3);",
															"});",
															"",
															"pm.test(\"Returns both patient Steven and Stephen\", () => {",
															"    let names = getFamilyNameOfAllPatients();",
															"    pm.expect(names).to.contain(\"Steven\");",
															"    pm.expect(names).to.contain(\"Stephen\");",
															"    ",
															"});",
															"",
															"",
															"",
															"// Retrieves the family name of all patients",
															"function getFamilyNameOfAllPatients() {",
															"    var names = [];",
															"",
															"    for(i = 0; i < response.entry.length; i++) {",
															"        names.push(response.entry[i].resource.name[0].family);",
															"    }",
															"",
															"    return names;",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Fuzzy search  returns valid response when using minimum search plus non mandatory",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9f218954-108c-4b6b-9a71-7240e6c77236",
														"exec": [
															"pm.variables.set('params', params = [",
															"   ",
															"    // Requests using just mandatory parameters required for a fuzzy search",
															"    { parameter: \"DOB, Family & Given\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&family=leng&address-postcode=DN16 6BB', expected: 200 },",
															"    { parameter: \"Gender, DOB, Given & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena', expected: 200 },",
															"",
															"    // Requests using bpth mandatory and extra valid parameters for a fuzzy search",
															"    { parameter: \"DOB, Family, Given & Postcode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=len&address-postcode=DN16&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family, PostCode & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena&family=len', expected: 200 }",
															"]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "799e2d0e-799a-4bce-95f8-e5ebdddcfefc",
														"exec": [
															"var response = pm.response.json();",
															"",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"let params = pm.variables.get('params');",
															"",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            authorization",
															"        }",
															"    }, function (err, res) {",
															"        console.log(\"Response for \" + p.parameter, res.json());",
															"",
															"        pm.test(\"Returns Status code \" + p.expected + \" for parameters \" + p.parameter, function () {",
															"            pm.expect(res.code).to.equal(p.expected);",
															"        });",
															"",
															"        if (p.expected === 400) {",
															"            pm.test(\"Returns INVALID_COMBINATION when using parameters \" + p.parameter, () => {",
															"                pm.expect(res.json().issue[0].details.coding[0].code).to.equal('FUZZY_CRITERIA_NOT_MET', 'invalid code');",
															"                pm.expect(res.json().issue[0].details.coding[0].display).to.equal('A fuzzy search was requested however the data given did not meet the fuzzy search criteria', 'invalid display message');",
															"                pm.expect(res.json().issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system link');",
															"                pm.expect(res.json().issue[0].severity).to.equal('error', 'invalid severity');",
															"            });",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&birthdate=2015-12-15&given=FuzzyYYYYYY",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "FuzzyYYYYYY"
														}
													]
												},
												"description": "Validates search parameter combinations for a fuzzy search\n- Minimum parameters combinations return a 200 response\n-- given name, family name and date of birth\n-- family name, date of birth, gender and postcode\n-- given name date of birth, gender and postcode\n\n- Mandatory plus non-mandatory parameter combinations return a 200 response\n-- DOB, Family, Given & Postcode\n-- Gender, DOB, Family, PostCode & Given"
											},
											"response": []
										}
									],
									"description": "The search will perform phonetic matching on names using soundex, transpose names, and score the results. If the fields death-date or general-practitioner are provided they will be ignored in this search. This search is performed using a combination of parameters. If an invalid combination is supplied _INVALID_COMBINATION_ will be returned.\n\n- Matching common homophones, such as ‘Smith’ and ‘Smythe’\n- Checking for transposed names, such as ‘Adam Thomas’ and ‘Thomas Adam’\n- Phonetic matching using soundex\n\n",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "result scoring",
									"item": [
										{
											"name": "Search matching criteria exactly returns Patient with score = 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb2a06a3-bc81-4c05-9c2f-97b0b13b64e3",
														"exec": [
															"let response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns 1 patient\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
															"});",
															"",
															"pm.test(\"Returns patient with Nhs Number 5900016528\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900016528');",
															"})",
															"",
															"pm.test(\"Returns score which is a number\", () => {",
															"    pm.expect(response.entry[0].search.score).to.be.a('number');",
															"});",
															"",
															"pm.test(\"Returns patient with score = 1\", () => {",
															"    pm.expect(response.entry[0].search.score).to.equal(1);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family=Toe&given=Mary&gender=male&birthdate=2001-10-10",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "Toe"
														},
														{
															"key": "given",
															"value": "Mary"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2001-10-10"
														}
													]
												},
												"description": "Validate search which matches criteria exactly returns Patient with score of 1"
											},
											"response": []
										},
										{
											"name": "Simple Patient retrieval does not return a matched score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a7536f11-fff5-4a44-948b-0784e96a2682",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns patient without a scoring\", () =>{",
															"    pm.expect(response).to.not.have.property('search');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient/5900016528",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900016528"
													]
												},
												"description": "Validate a patient retrieve does not return a matched score"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score between 0 and 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c4d0725a-4263-482c-8e51-d25375dbd805",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns patients each with a score between 0 and 1\", () =>{",
															"    let scores = patient().getScores();",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.at.least(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "For a wildcard based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Matching score increases when being more specific with Search query parameters",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8165d625-fd82-4f1a-ab6e-1b98501d2982",
														"exec": [
															"var response = pm.response.json();",
															"let globalNhsNumber = response.entry[0].resource.id;",
															"let globalScore = response.entry[0].search.score;",
															"let highestScore = globalScore;",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"",
															"",
															"let params = [",
															"    { parameter: \"Post Code\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16 3*'},",
															"    { parameter: \"Family Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16*'},",
															"    { parameter: \"Given Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&given=Selena'},",
															"    { parameter: \"PostCode, Family and Given name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3*&given=Selena'}",
															"]",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            authorization",
															"    }",
															"    }, function (err, res) {",
															"        let newScore = res.json().entry[0].search.score;",
															"        ",
															"        pm.test(\"Matching score increases when being more specific with \" + p.parameter + \" query parameter(s)\", () => {",
															"            console.log(\"Response for \" + p.parameter + \": \" + JSON.stringify(res.json()));",
															"            pm.expect(globalNhsNumber).to.be.equal(res.json().entry[0].resource.id, 'not the same patient as nhs numbers are different');",
															"            pm.expect(globalScore).to.be.below(newScore);",
															"        });",
															"        ",
															"        if(p.parameter != 'PostCode, Family and Given name') {",
															"            highestScore = newScore > highestScore ? newScore : highestScore;",
															"        } else {",
															"            pm.test(\"Matching score is at it's highest when being more specific with multiple query parameters (PostCode, Family and Given name)\", () => {",
															"                pm.expect(newScore).to.be.above(highestScore);",
															"            })",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "54210cb1-e4bd-48b6-b2aa-24e5d489c1fd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														}
													]
												},
												"description": "Validates that the returned patients score increases when being more specific with the following search query parameters\n- Post Code\n- Family Name\n- Given Name\n- Multiple (Post Code, Family name and Given name)"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner increases match score against the same search without General Practitioner",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59210346-9bc2-4b4e-8266-e816fb8237b6",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691184087\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691184087');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3ad41c52-3297-4242-99ef-b07c1dd37043",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=le*&address-postcode=DN16*&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching general-practitioner increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death increases match score against the same search without Date of Death",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a8f54d7c-74c7-44d3-a1b2-869bd43a6c3c",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "00ea17cb-1147-4e84-8e03-82e77f554c84",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching death-date increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ce3bd6c-5479-4904-90cc-6c022a0fad22",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has remained at 1\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "415961d3-15c8-4bc9-858f-d4df8740ebda",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber, \"invalid patient data\");",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.expect(initialScore).to.equal(1, \"invalid patient data\")",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN16 3BB"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct death-date does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "09141976-9395-4f74-b95d-3a024193a6e0",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183986\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183986');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3245467f-a036-4617-87ea-f3ce911e6ec1",
														"exec": [
															"const nhsNumber = '9691183986';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "88888"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN18 5DG"
														},
														{
															"key": "_fuzzy-match",
															"value": "true",
															"disabled": true
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct general-practitioner does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Fuzzy search returns multiple patients each with a matched score between 0 and 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f6f8bb4c-4cea-49b5-a240-30140b2714c3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "36d2154e-9c1d-40dd-8262-dec677e4065b",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"let scores = patient().getScores();",
															"let numberOfPatients = patient().getTotalNumberOfPatients();",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(numberOfPatients).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Each patient has a score\", () =>{",
															"    pm.expect(numberOfPatients).to.equal(scores.length)",
															"});",
															"",
															"pm.test(\"Each score is a number\", () => {",
															"   scores.forEach(score => {",
															"       pm.expect(score).to.be.a('number');",
															"   }) ",
															"});",
															"",
															"pm.test(\"Each score is between 0 and 1\", () => {",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.above(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For a fuzzy-search based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score sorted by score best-first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a9a7d5a1-0b80-4f52-b7b6-bd2621539903",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b068763d-1673-4a4a-b67d-ebfc1c2d2749",
														"exec": [
															"var chai = require(\"chai\");",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.be.above(1);",
															"});",
															"",
															"pm.test(\"Returns result scoring sorted best-first\", () => {",
															"    let scores = patientUtil.getScores();",
															"    ",
															"    for (i = 1; i < scores.length; i++) {",
															"        let previous = parseFloat(scores[i-1]);",
															"        let current = parseFloat(scores[i]);",
															"        pm.expect(current).to.be.at.most(previous);        ",
															"      }",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For alphanumeric searching, every result includes a score from 0 to 1. \n\nThis test is to validate that\n- Results are sorted best-first i.e. 1 to 0"
											},
											"response": []
										}
									],
									"description": "Every matched patient in the results list includes a score to indicate how closely the patient matched the search parameters. A score of 1.0 indicates an exact match. A score of less than 1.0 indicates a partial match. The result list is sorted in descending score order - best match first.",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "other tests",
									"item": [
										{
											"name": "Multiple Wildcards permitted - family",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "aac002b3-87b1-497b-b690-995a5df33e5a",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5ca09c07-0b19-4617-b903-70906fbe2ad8",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "general-practitioner",
															"value": "Y0001",
															"disabled": true
														}
													]
												},
												"description": "Multiple wildcards are permitted in family name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - given",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1ab5ff53-b63b-44a6-a93d-033d1c0bc8d2",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e4834da8-5659-453f-8711-a098712b3e45",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in given name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "89187a9e-80e6-4798-afb3-59a063ae07bf",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b5a776ce-f853-42a6-a947-65033f9c381f",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in postCode"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - family, given & postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16856af2-132a-4d34-b8f5-37ac39571a94",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "80f24011-9f19-4b8d-8377-2f13258cbe5e",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in family, given & postCode"
											},
											"response": []
										},
										{
											"name": "Search by Postcode ignores whitespacing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "096989b8-77f5-47de-927f-476dc12d2e41",
														"exec": [
															"let testScenarios = pm.variables.get('testData');",
															"let asidHeader = pm.variables.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"testScenarios.forEach(scenario => {",
															"    scenario.tests.forEach(testScript => {",
															"        console.log(\"Test Script: \" + testScript.name);",
															"        ",
															"        testScript.tests.forEach(t => {",
															"            let patientDetails;    ",
															"            let needToSetValues = true;",
															"            console.log(\"Query Type: \" + t.searchType);",
															"            ",
															"            pm.sendRequest({",
															"                url: pm.environment.get(\"environment\") + t.query,",
															"                method: 'GET',",
															"                header: {",
															"                    asidHeader,",
															"                    sessionURIDHeader,",
															"                    identityUUIDHeader,",
															"                    authorization",
															"                }",
															"            }, function (err, res) {            ",
															"                if (needToSetValues) {",
															"                    patientDetails = getNhsNumberAndInitialScore(res.json());                ",
															"                    needToSetValues = false;",
															"                }",
															"                pm.expect(res.code).to.equal(200, 'invalid response returned');",
															"                validateScoreRemainsTheSame(testScript.name + \" - \" + t.searchType, res.json(), patientDetails);",
															"            });",
															"        })",
															"    });",
															"});",
															"",
															"",
															"",
															"function getNhsNumberAndInitialScore(response) {",
															"    return {",
															"        nhsNumber: response.entry[0].resource.id,",
															"        score: response.entry[0].search.score",
															"    };",
															"}",
															"",
															"function validateScoreRemainsTheSame(testName, response, patientDetails) {",
															"    let newScore = response.entry[0].search.score;",
															"    pm.test(testName + ' returns patient ' + patientDetails.nhsNumber + ' with matching score of ' + newScore, () => {",
															"        pm.expect(response.entry[0].resource.id).to.equal(patientDetails.nhsNumber, \"unexpected patient record returned\");",
															"        console.log(testName + ' NHS Number ' + patientDetails.nhsNumber + ' with Score: ' + newScore);",
															"        pm.expect(patientDetails.score).to.equal(newScore);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b9359499-ad01-4dfa-af6b-13c85ddc313a",
														"exec": [
															"let simple = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN16 3BB' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN163BB'}",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M32 8EX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M32 8XX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let algorithmic = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=length&given=Selena&address-postcode=DN16 3BB' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&family=length&birthdate=2020-02-11&&given=Selena&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M32 8EX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M32 8XX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let alphanumeric = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3BB' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M32 8EX' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8XX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=speake*&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spaci*&gender=female&address-postcode=DN112EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"",
															"pm.variables.set('testData', testScenarios = [",
															"    { tests: simple },",
															"    { tests: alphanumeric },",
															"    { tests: algorithmic }",
															"]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}",
													"host": [
														"{{environment}}"
													]
												},
												"description": "Validates white spaces in postcodes do not affect Searching i.e. you can search for a patient with the;\n- postcode DN163BB using both DN163BB and DN16 3BB\n- postcode DN16 3BB using both DN16 3BB and DN163BB"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Alphanumeric",
									"item": [
										{
											"name": "By General Practitioner",
											"item": [
												{
													"name": "Search using invalid General Practitioner returns INVALID_VALUE",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4932a4d4-e492-4cd6-abb0-59b5211f3dd6",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"errorMessage\"));",
																	"",
																	"assertThatUtil().statusCodeIs(400);",
																	"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
																	"errorMessage().assertDisplayIs(\"Invalid value - '.' in field 'general-practitioner'\");",
																	"errorMessage().assertSeverityIs(\"error\");",
																	"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=.",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "."
																}
															]
														},
														"description": "Validate searching for a patient using an invalid general-practitioner value such as `.` returns an INVALID_VALUE error response"
													},
													"response": []
												},
												{
													"name": "Search using  General Practitioner returns no Patient record when no match is found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "372d2c21-e7ba-47ad-8c89-e8d8eed17e2c",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns 0 patients\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&family=Practitioner&general-practitioner=Y995894&birthdate=ge2000-01-01",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y995894"
																},
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "birthdate",
																	"value": "ge2000-01-01"
																}
															]
														},
														"description": "Validate no patient record is returned when performing a search using criteria including general-practitioner that does not match any patient."
													},
													"response": []
												},
												{
													"name": "Search using valid General Practitioner returns Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0e70529b-3177-4487-92b3-bd76763717ec",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns one patient\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
																	"})",
																	"",
																	"pm.test(\"Returns patient with NHS Number 5900014061\", () => {",
																	"    pm.expect(pm.response.json().entry[0].resource.id).to.equal('5900014061');",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=Y00002",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y00002"
																}
															]
														},
														"description": "Validate patients record is returned when searching by general-practitioner"
													},
													"response": []
												}
											],
											"description": "Patient should be searchable by GP Provider using the query parameter *general-practitioner*.\n",
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Sensitive Patient",
							"item": [
								{
									"name": "Search specifying GP of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db9d58a7-e9ba-4491-8e62-d4143affacee",
												"exec": [
													"eval(pm.globals.get(\"patient\"));",
													"",
													"",
													"pm.test(\"Returns status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1bcdbd37-cd76-48af-9e18-f110eac54ee7",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?gender=male&birthdate=2000-01-01&family=Ukraine',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Ukraine&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												},
												{
													"key": "_max-results",
													"value": "50",
													"disabled": true
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying GP which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e94781c-b6fa-45bd-953e-4ac5cff264d0",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f7467277-de45-4d44-b0fd-8bf568869796",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9745c132-1715-4a7e-a9bf-41e4288791c6",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2a0d31ba-1f18-4da5-a3bf-565a40f0241f",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Ukraine&gender=male&address-postcode=B4 3PP",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "address-postcode",
													"value": "B4 3PP"
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50610f06-00eb-43c1-8969-a752059561ce",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "db9dbea8-3dcb-4e49-bec8-9346406a6f3a",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&address-postcode=B4*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "address-postcode",
													"value": "B4*"
												}
											]
										},
										"description": "NHS Numbers: 5900013553, 5900005194\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including sensitive patient does not return sensitive details for sensitive patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4492dbb-40c4-4eb0-b51e-025f6242dcbb",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 2 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(2);",
													"})",
													"",
													"pm.test(\"Returns sensitive patient\", () => {",
													"    pm.expect(response.entry[1].resource.id).to.equal('5900013553');",
													"});",
													"",
													"pm.test(\"Sensitive patients address is not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.address).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients telecome details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.telecom).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients GP details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.generalPractitioner).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the following sensitive details are not returned for the sensitive patient (gp, death-notification extension, address and telecom)"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including invalid patient does not return invalid patients record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d30d37b-4424-4a4b-b219-ca08e85a6790",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900006107')).to.be.false;",
													"});",
													"",
													"pm.test(\"Does return non-invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900003876')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "14ed7024-6fe0-42f4-b84c-7ebdc5e0ee3b",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=ge2000-01-01&family=invalidated",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "invalidated"
												}
											]
										},
										"description": "Invalidated NHS Patient number : 5900006107\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients record is not returned"
									},
									"response": []
								},
								{
									"name": "Search matching sensitive patient returns security object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b205744-0d04-41fc-ac7f-f45ceb8d8cab",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Returns Sensitive patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900004430')).to.be.true;",
													"});",
													"",
													"pm.test(\"Returns Security object\", () => {",
													"    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('R', 'invalid code');",
													"    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted', 'invalid display');",
													"    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html', 'invalid system');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5528be7d-2f64-4dcc-9175-3345fde5fdb9",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=2001-02-01&family=sensitive",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2001-02-01"
												},
												{
													"key": "family",
													"value": "sensitive"
												}
											]
										},
										"description": "> GIVEN I perform a Search\nAND that matches a Sensitive patient\nWHEN I get the response  \nTHEN the Patients record includes the meta.security array  \nAND the array includes the **R** *restricted level*"
									},
									"response": []
								},
								{
									"name": "Search matching invalid patient only, results in patients data not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55b45245-3116-4aa0-a9b8-7f2717cb6812",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "63de1338-eed6-4732-a3ff-93cdb30b0827",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Invalidated&gender=female&given=Patient",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Invalidated"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "given",
													"value": "Patient"
												}
											]
										},
										"description": "**NHS Number: 5900006107**\n\n> GIVEN I perform a Search  \nAND that matches one patient\nAND that patient is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients details are not returned"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Error Responses",
							"item": [
								{
									"name": "Search invalid ASID - ACCESS_DENIED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "99a0f7cd-d60a-4909-9eaf-6eadf2cdc112",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0bae7cb2-2553-40da-83e6-78b314a1714e",
												"exec": [
													"// This test should not be executed against apigee direct as apigee automatically sends a valid asid header",
													"if (pm.environment.get('skipTest')) {",
													"    console.log('Skipping test when running via apigee');",
													"} else {",
													"    const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"    const error = eval(pm.globals.get(\"errorMessage\"));",
													"    assertThat.statusCodeIs(401)",
													"    error.assertCodeIs(\"ACCESS_DENIED\");",
													"    error.assertDisplayIs(\"Access Denied - Unauthorised\");",
													"    error.assertSeverityIs(\"error\");",
													"    error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "123456789"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=James&birthdate=2000-01-01&given=David&gender=male",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												}
											]
										},
										"description": "where an invalid ASID is passed into the request Header ACCESS_DENIED is returned"
									},
									"response": []
								},
								{
									"name": "Search invalid query parameters - INVALID_VALUE / INVALID_SEARCH_DATA / ADDITIONAL_PROPERTIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a7952e6-7f23-4f7c-ba44-bf9f2162b162",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64178543-0762-4f9e-bce3-c5987eb114ea",
												"exec": [
													"pm.variables.set('testData', data = [",
													"   { name: \"Invalid Max_results value - blank\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '' in field '_max-results'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*'},",
													"      ",
													"   { name: \"Invalid Max_results value - 51\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '51' in field '_max-results'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_max-results=51&gender=male&birthdate=ge2020-02-11&family=le*'},",
													"",
													"   { name: \"Invalid GP Practice format\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '12*' in field 'general-practitioner'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&birthdate=2000-01-01&given=David&gender=male&general-practitioner=12\\*'},",
													"",
													"   { name: \"Invalid Date Of DOD format\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '01-01-2000' in field 'death-date'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&death-date=01-01-2000&given=David&gender=male'},",
													"",
													"    { name: \"Invalid Date Of DOB format\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - '01-01-2000' in field 'birthdate'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&birthdate=01-01-2000&given=David&gender=male'},",
													"",
													"    { name: \"Special characters in query parameter values such as family\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.family'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=%$£James&birthdate=2000-01-01&given=David&gender=male'},",
													"",
													"    { name: \"Special characters in query parameter values such as given\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.given'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=%$£David&gender=male'},",
													"      ",
													"    { name: \"Special characters in option based values such as gender\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - 'male$' in field 'gender'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$'},",
													"      ",
													"    { name: \"Special characters in option based values such as postcode\", ",
													"      code: \"INVALID_VALUE\",",
													"      display: \"Invalid value - 'BD$ 2NB' in field 'address-postcode'\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&address-postcode=BD$ 2NB'},",
													"      ",
													"    { name: \"Special characters in ‘new unsupported fields’\", ",
													"      code: \"ADDITIONAL_PROPERTIES\", ",
													"      display: \"Invalid update with error - Additional properties are not allowed ('somethingnew' was unexpected)\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&somethingnew=fda'},",
													"      ",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male$"
												}
											]
										},
										"description": "##### Scenarios Tested\n- Invalid characters in Max_results\n- Invalid characters in General Practitioner\n- Invalid DOB format\n- Invalid DOD format\n- Special characters in option based values such as gender\n- Special characters in option based values such as postcode\n- Special characters in query parameter values such as family\n- Special characters in ‘new unsupported fields’\n\n\n\n\n> GIVEN I have a Search query containing special/invalid characters  \nWHEN I perform a Search  \nTHEN I should get the correct FHIR based error response"
									},
									"response": []
								},
								{
									"name": "Security validation is performed before request validation when performing a Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c654e2b-1250-4fab-9941-43f592f0e50c",
												"exec": [
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"\tlet asidTokenHeader = pm.environment.get('skipTest') ? getToken(scenario.asid) : getAsidHeader(scenario.asid)",
													"",
													"\tpm.sendRequest({",
													"\t\turl: pm.environment.get(\"environment\") + '/Patient?' + scenario.query,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\tasidTokenHeader,",
													"\t\t\tsessionURIDHeader,",
													"\t\t\tidentityUUIDHeader\t\t\t",
													"\t\t}",
													"\t}, function (err, res) {",
													"\t\tpm.test(scenario.name + \" Returns Status code \" + scenario.expectedStatus, function () {",
													"\t\t\tpm.expect(res.code).to.equal(scenario.expectedStatus, 'invalid response returned');",
													"\t\t});",
													"",
													"\t\tif (scenario.expectedStatus == 400) {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ADDITIONAL_PROPERTIES\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ADDITIONAL_PROPERTIES');",
													"\t\t\t});",
													"",
													"\t\t} else {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ACCESS_DENIED\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ACCESS_DENIED');",
													"\t\t\t});",
													"\t\t}",
													"\t});",
													"",
													"});",
													"",
													"function getToken(type) {",
													"\tlet token;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\ttoken = pm.globals.get(\"token\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\ttoken = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\ttoken = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: 'Authorization',",
													"\t\tvalue: 'Bearer ' + token",
													"\t}",
													"}",
													"",
													"function getAsidHeader(type) {",
													"\tlet asid;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\tasid = pm.environment.get(\"from_asid\");",
													"\t\t\tif(pm.environment.get('skipTest')) {",
													"\t\t\t\t// Running against apigee therefore do not set an asid -- let apigee send a valid one directly",
													"\t\t\t\treturn undefined",
													"\t\t\t}",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\tasid = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\tasid = '';",
													"\t\t\tbreak;",
													"\t}",
													"",
													"\t",
													"\treturn {",
													"\t\tkey: pm.globals.get(\"nhsd-asid-header\"),",
													"\t\tvalue: asid",
													"\t}",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7eaad2ff-5861-4e17-9da2-bf2824ade313",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"Valid asid/token and Invalid Search request\", asid: 'valid', query: 'faaaaamily=Smith&given=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 400},",
													"\t{ name: \"Invalid asid/token and Invalid Search request\", asid: 'invalid', query: 'family=Smith&givvvvven=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Invalid Search request\", asid: 'missing', query: 'family=Smith&given=Jane&gender=female&birthhhhdate=2010-10-22', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Valid Search request\", asid: 'missing', query: 'family=Smith&given=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 401}",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "Security checks should be performed first to prevent information leakage.\n\nValidates when sending requests which have both a invalid asid and search query parameter, validation is performed on the asid first, thus throwing a 401 Unauthorized instead of query param validation i.e. 400 Bad Request"
									},
									"response": []
								},
								{
									"name": "Search unrecognised query parameters - ADDITIONAL_PROPERTIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e9ece73-1b98-43b0-9465-48e8c7f67608",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"eval(pm.globals.get(\"errorMessage\"));",
													"const query = '/Patient?gender=male&birthdate=1925-02-11&family=smith&address-postcode=DN153PP&given=john&death-date=2020-02-11&general-practitioner=V0007'",
													"",
													"let params = [",
													"    { parameter: \"family\", queryParam: 'faamily' },",
													"    { parameter: \"given\", queryParam: 'giveeen' },",
													"    { parameter: \"gender\", queryParam: 'gendr' },",
													"    { parameter: \"birthdate\", queryParam: 'birthdat' },",
													"    { parameter: \"death-date\", queryParam: 'deathdate' },",
													"    { parameter: \"address-postcode\", queryParam: 'address-PostCod' },",
													"    { parameter: \"general-practitioner\", queryParam: 'general-practiner' },            ",
													"]",
													"",
													"params.forEach(p => {",
													"    let query = getQuery(p.parameter, p.queryParam);",
													"    console.log(\"Request url: \" + query);",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        let response = res.json();",
													"        console.log(\"Response: \" + response);",
													"        ",
													"        pm.test('Returns valid error response when misspelling parameter ' + p.parameter, () => {",
													"            pm.expect(response.issue[0].details.coding[0].display).to.equal(getExpectedErrorMessage(p.queryParam));",
													"            pm.expect(response.issue[0].details.coding[0].code).to.equal('ADDITIONAL_PROPERTIES');",
													"            pm.expect(response.issue[0].severity).to.equal('error');",
													"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
													"            ",
													"        })",
													"    })",
													"});",
													"",
													"",
													"function getExpectedErrorMessage(param) {",
													"    return 'Invalid update with error - Additional properties are not allowed (\\'' + param + '\\' was unexpected)';",
													"}",
													"",
													"function getQuery(parameter, replaceWith) {",
													"    console.log('Replacing ' + parameter + ' with ' + replaceWith);",
													"    return query.replace(parameter, replaceWith);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=length",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2020-02-11"
												},
												{
													"key": "family",
													"value": "length"
												}
											]
										},
										"description": "Passing in unrecognised search query parameters returns an ADDITIONAL_PROPERTIES error message which highlights which values were unrecognized"
									},
									"response": [
										{
											"name": "EXTRA_VALUE error response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-resultsA=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-matchB=false&_fuzzy-matchC=true",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-resultsA",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "_exact-matchB",
															"value": "false"
														},
														{
															"key": "_fuzzy-matchC",
															"value": "true"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 13:31:38 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "625"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('_exact-matchB', '_fuzzy-matchC', '_max-resultsA' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										},
										{
											"name": "Unrecognised search query parameter returns EXTRA_VALUE error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-match=false&_fuzzy-match=true&invalidHeader=true&anotherInvalidHeader=false",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "_exact-match",
															"value": "false"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "invalidHeader",
															"value": "true"
														},
														{
															"key": "anotherInvalidHeader",
															"value": "false"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 15:37:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "615"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search query resulting in > max-results - TOO_MANY_MATCHES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36119b9b-0ceb-4087-af11-fe2e94cbc32b",
												"exec": [
													"var response = pm.response.json();",
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(200);",
													"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
													"error.assertDisplayIs(\"Too Many Matches\");",
													"error.assertSeverityIs(\"information\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_max-results=40&gender=male&birthdate=ge2020-01-11&family=le*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_max-results",
													"value": "40"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2020-01-11"
												},
												{
													"key": "family",
													"value": "le*"
												}
											]
										},
										"description": "Search query which matches more patients then the max-results value returns a *TOO_MANY_MATCHES* error"
									},
									"response": []
								},
								{
									"name": "Fuzzy Search 1 character family name - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "36428bc1-a40e-4365-9e47-f39255ea3eab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "691b20e6-0f6e-4ad2-803c-33d704e53d13",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"var response = pm.response.json();",
													"",
													"assertThat.statusCodeIs(400);",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDisplayIs(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "S*"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "Fuzzy"
												}
											]
										},
										"description": "Attempt a _fuzzy_match_ using a family name of 1 character returns _FUZZY_CRITERIA_NOT_MET error"
									},
									"response": [
										{
											"name": "Fuzzy Search invalid search criteria",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "S*"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 09:05:44 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "599"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"NO_SEARCHES_PERFORMED\",\n                        \"display\": \"No searches were performed as the search criteria did not meet the minimum requirements\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										},
										{
											"name": "FUZZY_CRITERIA_NOT_MET error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "S*"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 15:59:27 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "605"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"FUZZY_CRITERIA_NOT_MET\",\n                        \"display\": \"A fuzzy search was requested however the data given did not meet the fuzzy search criteria\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Fuzzy Search wildcarded family - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "32ce9862-daf7-4206-81ee-ebde043adea0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "27394a96-a27b-43a0-9e86-8cc726803d14",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(400)",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDisplayIs(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Ja\\*&birthdate=2000-01-01&given=David&gender=male",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "Ja\\*"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												}
											]
										},
										"description": "Validates wildcards are not allowed when performing a fuzzy-search"
									},
									"response": []
								},
								{
									"name": "Fuzzy Search Invalid value in fuzzy_match parameter - INVALID_VALUE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ef21353-ac26-4dc3-8916-b5773f515886",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "31cb8174-af61-4751-bf98-eaabf0f1bc03",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"var response = pm.response.json();",
													"",
													"assertThat.statusCodeIs(400);",
													"",
													"error.assertCodeIs(\"INVALID_VALUE\");",
													"error.assertDisplayIs(\"Invalid value - 'test' in field '_fuzzy-match'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "test"
												},
												{
													"key": "family",
													"value": "Stephen"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "Fuzzy"
												}
											]
										},
										"description": "Setting the _fuzzy-match_ value to `test` returns a *INVALID_VALUE* error message "
									},
									"response": [
										{
											"name": "fuzzy-match INVALID_VALUE response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "test"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 09:10:09 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "548"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - 'test' in field '_fuzzy-match'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search Invalid Leading Wildcards - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7b46fb6-298f-4cc4-a27f-bc21c5d873f8",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"Invalid leading wildcards on given name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.given'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=S\\*'},",
													"      ",
													"    { name: \"Invalid leading wildcards on given name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.given'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=\\*earch'},",
													"",
													"    { name: \"Invalid leading wildcards on family name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.family'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=\\*apping&gender=female&birthdate=2010-01-01&given=Search'},",
													"      ",
													"    { name: \"Invalid leading wildcards on family name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'name.family'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=M\\*&gender=female&birthdate=2010-01-01&given=Search'},",
													"",
													"    { name: \"Invalid leading wildcards on address-postcode\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'address.postalCode'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=Search&address-postcode=L\\*'},",
													"",
													"    { name: \"Invalid leading wildcards on address-postcode\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'address.postalCode'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=Search&address-postcode=\\*2AA'},",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aa80f733-dc26-4117-8904-6f5fda056867",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=Smith&gender=female&birthdate=2010-01-01&given=\\*ane",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "Smith"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2010-01-01"
												},
												{
													"key": "given",
													"value": "\\*ane"
												}
											]
										},
										"description": "Invalid leading wildcards on given name, family name and postcode results in an error response"
									},
									"response": []
								},
								{
									"name": "Fuzzy search invalid combinations - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7e35d075-c10b-4ffc-935e-242f867df04d",
												"exec": [
													"pm.variables.set('params', params = [",
													"   ",
													"    // Requests missing mandatory parameters required for a fuzzy search",
													"    { parameter: \"DOB & Family\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=le', expected: 400 },",
													"    { parameter: \"DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng*&address-postcode=DN16*', expected: 400 },",
													"    { parameter: \"Gender, DOB & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&&given=Selena', expected: 400 },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f8deab90-5acb-4086-9d2d-f59bfde55ae8",
												"exec": [
													"var response = pm.response.json();",
													"",
													"let asidHeader = pm.environment.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"let params = pm.variables.get('params');",
													"",
													"",
													"params.forEach(p => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + p.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        console.log(\"Response for \" + p.parameter, res.json());",
													"",
													"        pm.test(\"Returns Status code \" + p.expected + \" for parameters \" + p.parameter, function () {",
													"            pm.expect(res.code).to.equal(p.expected);",
													"        });",
													"",
													"        if (p.expected === 400) {",
													"            pm.test(\"Returns INVALID_COMBINATION when using parameters \" + p.parameter, () => {",
													"                pm.expect(res.json().issue[0].details.coding[0].code).to.equal('INVALID_SEARCH_DATA', 'invalid code');",
													"                pm.expect(res.json().issue[0].details.coding[0].display).to.equal(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"                pm.expect(res.json().issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system link');",
													"                pm.expect(res.json().issue[0].severity).to.equal('error', 'invalid severity');",
													"            });",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&birthdate=2015-12-15&given=FuzzyYYYYYY",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "FuzzyYYYYYY"
												}
											]
										},
										"description": "Validates search parameter combinations for a fuzzy search\n\n- Invalid combinations return a 400 response\n-- DOB & Family\n-- DOB, Family & PostCode\n-- Gender, DOB & Given"
									},
									"response": []
								},
								{
									"name": "Search missing mandatory fields - INVALID_SEARCH_DATA / MISSING_VALUE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8aaa46aa-641a-40bc-92ba-d4580cb090b0",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"missing mandatory fields - Birth\", ",
													"      code: \"MISSING_VALUE\",",
													"      display: \"Missing value - 'birth_date/birth_date_range_start/birth_date_range_end'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female'},",
													"",
													"    { name: \"missing mandatory fields - Family\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      query: '/Patient?gender=female&birthdate=2010-01-01'},",
													"      ",
													"    { name: \"missing mandatory fields - Gender\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&birthdate=2010-01-01'},",
													"      ",
													"    { name: \"missing mandatory fields - Family & Gender\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      query: '/Patient?birthdate=2010-01-01'}",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8e5b25af-d873-4812-92d6-dd8d87e656eb",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=Smith&birthdate=2010-01-01",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "Smith"
												},
												{
													"key": "gender",
													"value": "female",
													"disabled": true
												},
												{
													"key": "birthdate",
													"value": "2010-01-01"
												}
											]
										},
										"description": "missing mandatory fields on simple search will result in a 400 error response:\n\n- missing DOB\n- missing Family\n- missing Gender"
									},
									"response": []
								},
								{
									"name": "Search query resulting in >50 patients - TOO_MANY_MATCHES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "889da857-ba24-48a2-9f1c-fb8783c044ad",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
													"error.assertDisplayIs(\"Too Many Matches\");",
													"error.assertSeverityIs(\"information\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2019-02-11&family=le*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_max-results",
													"value": "50"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2019-02-11"
												},
												{
													"key": "family",
													"value": "le*"
												}
											]
										},
										"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
									},
									"response": [
										{
											"name": "TOO_MANY_MATCHES error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Wed, 26 Feb 2020 15:52:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Etag",
													"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search query No Match - NO_MATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d7ca22e-3cd5-4a84-bf6b-294f186a1bfb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=Smith",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2019-02-11"
												},
												{
													"key": "family",
													"value": "Smith"
												}
											]
										},
										"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
									},
									"response": [
										{
											"name": "TOO_MANY_MATCHES error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Wed, 26 Feb 2020 15:52:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Etag",
													"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Performing a fuzzy search in combination with a histroic search returns INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c82a27f6-9d89-4765-8b41-c91161c64b26",
												"exec": [
													"let asidHeader = pm.environment.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"// Send request with _fuzzy-match=false to make sure no patients are returned",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?_fuzzy-match=false&family=James&birthdate=2000-01-01&given=David&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {",
													"    pm.test('@Before: fuzzy-match set to false returns 0 patients', () => {",
													"        console.log('@Before Request: ' + JSON.stringify(res.json()));",
													"        pm.expect(res.json().total).to.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "997294f5-f2b1-4b58-9528-ff353aa7378d",
												"exec": [
													"var response = pm.response.json();",
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(400);",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDisplayIs(\"Invalid search data provided - 'Performing a historic search and a fuzzy search at the same time is incompatible'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "Performing a fuzzy-search in conjunction with a historic search returns a 400 BAD REQUEST with the error INVALID_SEARCH_DATA"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Retrieve",
					"item": [
						{
							"name": "Error Responses",
							"item": [
								{
									"name": "Retrieve Patient - Error Responses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5338d65-9cab-4fa8-b5f1-e94bf5d6c2ce",
												"exec": [
													"/*assign local scenario variable from \"scenario\" variable set in prerequisite script and also assign header variables from variables*/\r",
													"\r",
													"let scenario = pm.variables.get('scenario');\r",
													"let asidHeader = pm.variables.get(\"asidHeader\");\r",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
													"let authorization = pm.environment.get(\"authorizationHeader\");\r",
													"\r",
													"/*for each scenario dataSet loop the Retrieve Patient service and ensure the correct Error Reponse is returned for each scenario*/   \r",
													"\r",
													"  scenario.forEach(s => {\r",
													"    console.log(\"scenario under test is: \" + s.desc);\r",
													"\r",
													"   pm.sendRequest({\r",
													"        url: pm.environment.get(\"environment\") + \"/Patient/\" + s.nhs_id,\r",
													"        method: 'GET',\r",
													"        header: { asidHeader, sessionURIDHeader, identityUUIDHeader, authorization }\r",
													"        \r",
													"    }, function (err, res) {\r",
													"        let response = res.json();\r",
													"        pm.test('The correct error response has been returned for: ' + s.desc, () => {\r",
													"            pm.expect(res.code).to.equal(s.responseStatus);\r",
													"            pm.expect(response.issue[0].details.coding[0].display).to.equal(s.responseDisplay);\r",
													"            pm.expect(response.issue[0].details.coding[0].code).to.equal(s.responseCode);\r",
													"            pm.expect(response.issue[0].severity).to.equal(s.responseSeverity);\r",
													"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
													"            \r",
													"        })\r",
													"    })\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c67f1e0b-6b59-4825-b2e0-0f7cba1e15d5",
												"exec": [
													"/*Create dataSets for testing 'Retrieve Patient' Error Exceptions scenarios and assign the \"scenario\" array to a variable to be used in Test*/ \r",
													"  \r",
													"   let scenario = [\r",
													"       {desc: \"INVALIDATED_RESOURCE - invalidated NHS number (sensetive patient)\",  \r",
													"        nhs_id: \"5900006107\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALIDATED_RESOURCE\", \r",
													"        responseDisplay: \"Resource that has been marked as invalid was requested - invalid resources cannot be retrieved\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - invalid check digit\",  \r",
													"        nhs_id: \"9000000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_RESOURCE_ID\", \r",
													"        responseDisplay: \"Resource Id is invalid\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - too short\", \r",
													"        nhs_id: \"900000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_RESOURCE_ID\", \r",
													"        responseDisplay: \"Resource Id is invalid\"},\r",
													"        \r",
													"      {desc: \"PATIENT_NOT_FOUND - NHS Number Does Not Exist\", \r",
													"        nhs_id: \"9111231130\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"not-found\", \r",
													"        responseSeverity: \"information\", \r",
													"        responseCode: \"RESOURCE_NOT_FOUND\", \r",
													"        responseDisplay: \"Resource not found\"},\r",
													"        \r",
													"        {desc: \"INVALID_NHS_NUMBER - not passed in\", \r",
													"        nhs_id: \"\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"UNSUPPORTED_SERVICE\", \r",
													"        responseDisplay: \"Unsupported Service\"},\r",
													"        \r",
													"       {desc: \"RETRIEVAL_UNSUPPORTED\", \r",
													"        nhs_id: \"9111231130/nationality\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"UNSUPPORTED_SERVICE\", \r",
													"        responseDisplay: \"Unsupported Service\"},\r",
													"        \r",
													"       {desc: \"INVALIDATED_NHS_NUMBER\", nhs_id: \"5900006107\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALIDATED_RESOURCE\", \r",
													"        responseDisplay: \"Resource that has been marked as invalid was requested - invalid resources cannot be retrieved\"} \r",
													"       ]\r",
													"       \r",
													"    pm.variables.set('scenario', scenario); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/:nhs_id",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												":nhs_id"
											],
											"variable": [
												{
													"key": "nhs_id",
													"value": "{{nshID}}"
												}
											]
										},
										"description": "Invalid Retrieve Patient calls shall result in a valid Error Response"
									},
									"response": []
								},
								{
									"name": "Security validation is performed before request validation when performing a Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee919d5b-3640-4bd2-9c3c-d964a5e5005e",
												"exec": [
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"",
													"pm.variables.get('testData').forEach(scenario => {\t\t",
													"\tlet asidTokenHeader = pm.environment.get('skipTest') ? getToken(scenario.asid) : getAsidHeader(scenario.asid) ",
													"",
													"\tpm.sendRequest({",
													"\t\turl: pm.environment.get(\"environment\") + '/Patient/' + scenario.nhsNumber,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\tasidTokenHeader,",
													"\t\t\tsessionURIDHeader,",
													"\t\t\tidentityUUIDHeader,\t\t\t",
													"\t\t}",
													"\t}, function (err, res) {",
													"\t\tpm.test(scenario.name + \" Returns Status code \" + scenario.expectedStatus, function () {",
													"\t\t\tpm.expect(res.code).to.equal(scenario.expectedStatus, 'invalid response returned');",
													"\t\t});",
													"",
													"\t\tif (scenario.expectedStatus == 400) {",
													"\t\t\tpm.test(scenario.name + \" Returns error code INVALID_RESOURCE_ID\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('INVALID_RESOURCE_ID');",
													"\t\t\t});",
													"",
													"\t\t} else {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ACCESS_DENIED\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ACCESS_DENIED');",
													"\t\t\t});",
													"\t\t}",
													"\t});",
													"",
													"});",
													"",
													"",
													"function getToken(type) {",
													"\tlet token;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\ttoken = pm.globals.get(\"token\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\ttoken = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\ttoken = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: 'Authorization',",
													"\t\tvalue: 'Bearer ' + token",
													"\t}",
													"}",
													"",
													"function getAsidHeader(type) {",
													"\tlet asid;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\tasid = pm.environment.get(\"from_asid\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\tasid = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\tasid = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: pm.globals.get(\"nhsd-asid-header\"),",
													"\t\tvalue: asid",
													"\t}",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e2eba40-fcc3-4429-a4a0-51342c4f1dd8",
												"exec": [
													"pm.variables.set('testData', data = [",
													"\t{ name: \"Valid asid/token and Invalid NHS Number\", asid: 'valid', nhsNumber: '1234', expectedStatus: 400},",
													"\t{ name: \"Invalid asid/token and Invalid NHS Number\", asid: 'invalid', nhsNumber: '1234', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Invalid NHS Number\", asid: 'missing', nhsNumber: '1234', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Valid NHS Number\", asid: 'missing', nhsNumber: '5900014061', expectedStatus: 401}",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/1234",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												"1234"
											]
										},
										"description": "Security checks should be performed first to prevent information leakage.\n\nValidates when sending a request which has both an invalid asid and nhs number, validation is performed on the asid first, thus throwing a 401 Unauthorized instead of a\nnhs number validation error (400 Bad Request)"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve Patient - Happy path 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6a9beb8-7e6e-4deb-bd37-2d72f5df2ace",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cff61e92-d035-412b-b45d-5aec06d7a8a8",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
											"pm.variables.set(\"given\", [\"Search\", \"Again\"]);",
											"pm.variables.set(\"family\", \"Mapping\");",
											"pm.variables.set(\"prefix\", \"Dame\");",
											"pm.variables.set(\"suffix\", [\"MBA\", \"PHD\"]);",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2010-01-01\");",
											"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
											"pm.variables.set(\"addressLine\", JSON.stringify([\"1\", \"westwood\", \"ecclechill\", \"bradfordian\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"telecomValue\", \"07900000000\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", false);",
											"pm.variables.set(\"patientId\", \"5900009068\");",
											"pm.variables.set(\"expectedBirthOrder\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6d21e48-eaa8-41bc-b93c-dbb8fa2e7943",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a9b087f9-a408-407e-8435-096683e6ef32",
										"exec": [
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"alias\");",
											"pm.variables.set(\"family\", \"Alias\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"1990-10-10\");",
											"pm.variables.set(\"prefix\", \"Dr\");",
											"pm.variables.set(\"addressType\", \"work\");",
											"pm.variables.set(\"telecomType\", \"fax\");",
											"pm.variables.set(\"telecomUse\", \"work\");",
											"pm.variables.set(\"given\", [\"John\"]);",
											"pm.variables.set(\"suffix\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"130 Greenhouse Lane\",\"Work Road\",\"Roundhay\",\"Leeds\",\"WEST YORKSHIRE\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2019-01-10\");",
											"pm.variables.set(\"addressPeriodEnd\", \"2020-11-10\");",
											"pm.variables.set(\"postalCode\", \"LS18 4AD\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"metaVersionId\", \"21\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"2342424234\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"language\", \"en\");",
											"pm.variables.set(\"languageDisplay\", \"English\");",
											"pm.variables.set(\"interpreter\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4551576-f1ee-4bf0-9df8-2673e395c1fb",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "422ea09c-f45e-4bc1-b5d2-55ea0f2e659e",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"",
											"",
											"pm.variables.set(\"nameType\", \"preferred\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"person\"]);",
											"pm.variables.set(\"family\", \"Unknown\");",
											"pm.variables.set(\"prefix\", \"Lady\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"13 westwood\",\"bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-01-02\");",
											"pm.variables.set(\"postalCode\", undefined);",
											"pm.variables.set(\"addressType\", \"correspondence\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"telecomType\", \"textphone\");",
											"pm.variables.set(\"telecomUse\", \"pager\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", true);",
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2f588c8-bd84-4cd7-9ca2-29f02ece10ca",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f282848-4b4d-4e3e-90c9-2ed62cb7dcf5",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"previous\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"someone\"]);",
											"pm.variables.set(\"family\", \"previous\");",
											"pm.variables.set(\"prefix\", \"Lord\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2008-01-01\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"1 Temporary Ave\",\"Temporary Place\",\"Temporary Town\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
											"pm.variables.set(\"postalCode\", \"BD2 7NT\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
											"pm.variables.set(\"telecomType\", \"email\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"patientId\", \"5900019241\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd66ce68-11fb-4cf6-8d02-191633f97174",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce2a978f-f5ac-43db-bc98-47bfa1d8e3dd",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"family\", \"temporary\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2004-03-01\");",
											"pm.variables.set(\"prefix\", \"Miss\");",
											"pm.variables.set(\"nameType\", \"birth\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"mobile\");",
											"pm.variables.set(\"given\", [\"ned\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"13 Westwood\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09000000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0677c495-28b7-4614-a7d0-6f5329d13b31",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93e9c660-5c04-4235-9b96-9e37a331f9ef",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mr\");",
											"pm.variables.set(\"nameType\", \"bachelor\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"temporary\");",
											"pm.variables.set(\"family\", \"Mister\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2009-01-01\");",
											"pm.variables.set(\"given\", [\"Any\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "951a014c-25ff-4e25-8eef-4921c0078ff4",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ac9ea26-5ee6-4589-a2f8-a2991f6048ae",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mrs\");",
											"pm.variables.set(\"nameType\", \"maiden\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"Answering Machine\");",
											"pm.variables.set(\"family\", \"Answermachine\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2007-01-01\");",
											"pm.variables.set(\"given\", [\"another\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"27 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900000605\");",
											"pm.variables.set(\"metaVersionId\", \"5\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09234567\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "work in progress.  This test shall cover a Happy path Retrieve scenario.  It currently asserts on General Practitioner, Pharmicies, Communication & Patient identifier, language.  Other checks shall be added in due course."
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38a06bad-160d-4431-a079-48622d7c9aef",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04d63e39-15c7-4a21-83dc-4e8957d40d8d",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Ms\");",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"Emergency\");",
											"pm.variables.set(\"family\", \"Emergency\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2004-01-01\");",
											"pm.variables.set(\"given\", [\"Emma\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"91 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"patientId\", \"5900013863\");",
											"pm.variables.set(\"metaVersionId\", \"2\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000001\");",
											"pm.variables.set(\"deceasedDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Emergency\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 9 - Superceded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fe6d905-e1f3-4a25-ba7d-7ae6e1003d5e",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70a2fc5c-c83f-4f99-90ff-70e0c4f7c021",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"supercededPatientId\", \"5900006360\");",
											"",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"Retained\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2006-04-01\");",
											"pm.variables.set(\"given\", [\"Jon\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"15 Retained Road\",\"Retained\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LK\");",
											"pm.variables.set(\"patientId\", \"5900011143\");",
											"pm.variables.set(\"resourceType\", \"Patient\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "5900006360"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* If the Patient record is marked as Superceded, the response shall return the Retained record for the Patient\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* nameFamily\r\n* nameGiven\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* resourseType\r\n* patientId\r\n* identifierExtention"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Sensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15089dc8-6987-46b6-9ee2-b0dd15baf7d8",
										"exec": [
											"var response = pm.response.json();",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"pm.variables.set(\"s-flagged\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73d36a04-c531-42db-80d4-3a87f96d0cd5",
										"exec": [
											"pm.variables.set(\"s-flagged\", true);",
											"",
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"sensitive\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"given\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"patientId\", \"5900004430\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"deceasedDateTime\", \"2009-03-01\");",
											"pm.variables.set(\"securityCode\", \"R\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationStatus.display\", \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");",
											"pm.variables.set(\"language\", \"be\");",
											"pm.variables.set(\"languageDisplay\", \"Belarusian\");",
											"pm.variables.set(\"interpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "200000000610"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "1234567890"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "1234567890"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900004430",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900004430"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Date of birth formatting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc370a70-666f-4475-9edc-4726ef16e173",
										"exec": [
											"let testScenarios = pm.variables.get(\"testData\");",
											"let asidHeader = pm.environment.get(\"asidHeader\");",
											"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
											"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
											"let authorization = pm.environment.get(\"authorizationHeader\");",
											"",
											"testScenarios.forEach(scenario => {",
											"    pm.sendRequest({",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + scenario.nhsNumber,",
											"        method: 'GET',",
											"        header: {",
											"            asidHeader,",
											"            sessionURIDHeader,",
											"            identityUUIDHeader,",
											"            authorization",
											"        }",
											"    }, function (err, res) {",
											"        console.log(\"Response\", res.json());",
											"",
											"        pm.test(scenario.dobFormat, () => {",
											"            pm.expect(res.code).to.equal(200, 'invalid status code');",
											"            pm.expect(res.json().id).to.equal(scenario.nhsNumber, 'wrong patient returned');",
											"            pm.expect(res.json().birthDate).to.equal(scenario.expectedDob, 'invalid birthDate');",
											"        });",
											"    });",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af50de4b-a81c-4d81-b10b-efda31e3ee57",
										"exec": [
											"pm.variables.set(\"testData\", data = [",
											"    {",
											"        dobFormat: \"Date of birth in the format yyyy is returned in the format yyyy\",",
											"        nhsNumber: \"5900017605\",",
											"        expectedDob: \"2000\"",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth in the format yyyyMM is returned in the format yyyyMM\",",
											"        nhsNumber: \"5900010260\",",
											"        expectedDob: \"2000-01\"",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is an invalid date means birthDate element is not returned\",",
											"        nhsNumber: \"5900011631\",",
											"        expectedDob: undefined",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is in an invalid format means birthDate element is not returned\",",
											"        nhsNumber: \"5900010384\",",
											"        expectedDob: undefined",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is empty means birthDate element is not returned\",",
											"        nhsNumber: \"5900015319\",",
											"        expectedDob: undefined",
											"    },",
											"]);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										""
									]
								},
								"description": "Handle patients dates of birth which are in different formats\n\n\n- NHS Number: 5900017605 with DOB as 2000 (yyyy) should display DOB as 2000  \n- NHS Number: 5900010260 with DOB as 2000/01 (yyyyMM), should display DOB as 2000/01  \n- NHS Number: 5900011631 with DOB as 31st Feb, should not display DOB at all  \n- NHS Number: 5900010384 with DOB as 2 (y), should not display DOB at all  \n- NHS Number: 5900015319 with Missing DOB, should not display DOB at all"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient: Date of death formatting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efadc8bc-fe59-4c46-889e-6b1c1bfb3b32",
										"exec": [
											"let testScenarios = pm.variables.get(\"testData\");",
											"let asidHeader = pm.environment.get(\"asidHeader\");",
											"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
											"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
											"let authorization = pm.environment.get(\"authorizationHeader\");",
											"",
											"testScenarios.forEach(scenario => {",
											"    pm.sendRequest({",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + scenario.nhsNumber,",
											"        method: 'GET',",
											"        header: {",
											"            asidHeader,",
											"            sessionURIDHeader,",
											"            identityUUIDHeader,",
											"            authorization",
											"            ",
											"        }",
											"    }, function (err, res) {",
											"        console.log(\"Response\", res.json());",
											"",
											"        pm.test(scenario.deathDate, () => {",
											"            pm.expect(res.code).to.equal(200, 'invalid http status code');",
											"            pm.expect(res.json().id).to.equal(scenario.nhsNumber, 'wrong patient returned');",
											"            pm.expect(res.json().deceasedDateTime).to.equal(scenario.expectedDeathDate, 'invalid deceasedDateTime');",
											"        });",
											"    });",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2010c71-5153-4641-bd61-bd1947446bf4",
										"exec": [
											"pm.variables.set(\"testData\", data = [",
											"    {",
											"        deathDate: \"Death date in the format yyyy means deceasedDateTime is returned in the format yyyy\",",
											"        nhsNumber: \"5900017605\",",
											"        expectedDeathDate: \"2020\"",
											"    },",
											"    {",
											"        deathDate: \"Death date in the format yyyyMM means deceasedDateTime is returned in the format yyyyMM\",",
											"        nhsNumber: \"5900010260\",",
											"        expectedDeathDate: \"2000-01\"",
											"    },",
											"    {",
											"        deathDate: \"Death date which is an invalid date means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900011631\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which is an invalid format means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900010384\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which is empty means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900015319\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which contains an invalid time means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900008142\",",
											"        expectedDeathDate: undefined",
											"    }",
											"]);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900008142 ",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900008142 "
									]
								},
								"description": "Handle patients death date which could be in a different format\n\n- NHS Number: 5900017605 with Death date as 2000 (yyyy) should display Death date as 2000  \n- NHS Number: 5900010260 with Death date as as 2000/01 (yyyyMM)  \n- NHS Number: 5900011631 with Death date as 31st Feb, should not display Death date at all  \n- NHS Number: 5900010384 with Death date as 2 (y), should not display Death date at all  \n- NHS Number: 5900015319 with Missing Death date, should not display Death date at all  \n- NHS Number: 5900008142 with Invalid time for death date, should not display Death date at all"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Related Person",
					"item": [
						{
							"name": "Related Person 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f9f86bd-1e5b-4ef6-8f49-43f53c13fa38",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "03f1dfcc-7218-48b2-9e82-57b2b5484744",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900009068\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-09\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"surname\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"first\",\"second\"]);",
											"pm.variables.set(\"relatedPersonPrefix\", \"Dame\");",
											"pm.variables.set(\"relatedPersonSuffix\", [\"MBA\"]);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"brother\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersonRelationshipNOKCode\", \"N\");",
											"pm.variables.set(\"relatedPersonRelationshipNOKDisplay\", \"Next-of-Kin\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"home\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-09\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"09000000009\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"12\",\"weetwood\",\"somewhere\",\"somewhere town\",\"a county\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2LQ\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"email\");",
											"pm.variables.set(\"relatedPersonPreferredContactTime\", \"12:00\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Large print\");",
											"pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"yes\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"ab\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"relatedPersonInterpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"yes\"\n* Related Person PreferredContactMethod Extension - where it is set to \"email\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Large Print\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"yes\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to brother\n* Related Person RelationshipClass - when class has been set to Agent\n* Related Person Next of Kin - when next of kin has been set to \"yes\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "080dab38-03ab-466e-9299-d5c06e34d830",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ccb6301b-f0d9-427d-b72e-7fcc59b160fc",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-09\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"anothername\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"firstname\"]);",
											"pm.variables.set(\"relatedPersonPrefix\", \"Dr\");",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"child\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Guardian\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"work\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"fax\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-09\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"12345678912\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"County\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"letter\");",
											"pm.variables.set(\"relatedPersonPreferredContactTime\", \"14:00\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Braille\");",
											"pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"no\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"ab\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"relatedPersonInterpreter\", false);",
											"",
											"pm.variables.set(\"relatedPersonRank1\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"letter\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Braille\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"no\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"child\"\n* Related Person RelationshipClass - when class has been set to \"Guardian of patient\"\n* Related Person Next of Kin - when next of kin has been set to \"no\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26712d99-242b-40ab-aa62-06c79a2c9b82",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2e5f79e-024d-46d3-9dbe-872d76715d81",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"anothername\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"firstname\"]);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"partner\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Personal relationship\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"pager\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"textphone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"12345678912\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"13 Westwood Ave\",\"Eccleshill\",\"bradford\",\"County\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"minicom\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Audio tape\");",
											"//pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"undefined\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"Null\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Unknown\");",
											"pm.variables.set(\"relatedPersonInterpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Minicom (Textphone)\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Audio tape\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"yes\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"domestic partner\"\n* Related Person RelationshipClass - when class has been set to \"Personal\"\n* Related Person Next of Kin - when next of kin has been set to \"no\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a5cef85-f370-4c00-ade9-8e492840a2eb",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa31c267-0723-4060-8300-6b02d405c297",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900019241\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"relative\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"home\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"email\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"a.s@mail.com\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"not telephone contact\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"No Telephone contact\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"family member\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7aa9a24e-fd49-44cc-8b54-30aa66a9385c",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf2b7927-8d19-41a9-9390-2dbfa3d1452e",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"father\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"answering machine\"); ",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"sign language\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Sign Language\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"father\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6a74bac-68b1-4b56-b4ed-2c0f0d6e1981",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "635a5eee-28c1-40b8-9616-17ac108e950f",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"mother\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"emergency\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"telephone\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Telephone\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"mother\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d59d9b0-987e-475e-9209-fdab844e346f",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a283bf3-4757-408c-9e62-7491dc932d2e",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900000605\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-16\");",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"next of kin\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"pm.variables.set(\"relatedPersontelecomUse\", \"mobile\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-16\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"telephone via proxy\");",
											"pm.variables.set(\"relatedPersonPatientID\", \"5900005798\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  where it has not been set\n* Related Person PreferredContactMethod Extension - where it has not been set\n* Related Person PreferredContactTimes Extension - where it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - where it has not been set\n* Related Person Language Extension - where it has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"Next-of-Kin\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 8 multiple related persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cff7717e-1428-43da-92d7-df060154a998",
										"exec": [
											"var response = pm.response.json(); ",
											"eval(pm.globals.get(\"patient\"));",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											"",
											"",
											"//Checks performed on Subsequent Related people for the given Patient",
											"let rank = pm.variables.get('rank');",
											"rank.forEach(r => {",
											"    var relatedPerson = getRelatedPerson(r);",
											"        pm.test(\"Subsequent related person family name has been mapped correctly\", function () {",
											"            pm.expect(relatedPerson.resource.name[0].family).to.eql(r.relatedPersonFamily);",
											"        });",
											"        ",
											"        pm.test(\"Subsequent related person rank has been mapped correctly and in the correct order\", function () {",
											"        let entryInstance = (r.relatedPersonRank- 1)",
											"        if (!r.relatedPersonRank) {",
											"            pm.expect(relatedPerson.resource.extension).to.eql(undefined)",
											"            pm.expect(response.entry[16].resource.name[0].family).to.eql(r.relatedPersonFamily)",
											"        }",
											"        else {",
											"              pm.expect(response.entry[entryInstance].resource.extension[0].valuePositiveInt).to.eql(r.relatedPersonRank);",
											"        }",
											"        });",
											"        ",
											"        pm.test(\"Subsequent related person relationshipType has been mapped correctly\", function () {",
											"            ",
											"            if (r.relatedPersonRelationshipType == \"self\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ONESELF\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"self\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"foster parent\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"PRNFOST\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"foster parent\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"sister\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"SIS\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"sister\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"spouse\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"SPS\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"spouse\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"step parent\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"STPPRN\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"step parent\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"not known\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"U\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Unknown\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"guardian\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Guardian\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Guardian of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"polygamous partner\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"PolygamousPartner\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Polygamous Partner of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"dependant\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Dependant\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Dependant of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"nondependant\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"NonDependant\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Non Dependant of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy contact\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyContact\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Contact for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy communication\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyCommunication\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Communication for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy contact communication\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyContactCommunication\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Contact and Communication for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"carer\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Carer\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Carer of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"not specified\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"NotSpecified\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Not Specified\");",
											"            }",
											"            else pm.expect.fail(\"relationshipType not been mapped correctly\");",
											"        });",
											"});",
											"",
											"//Ensure that the total number of related persons returned is 17",
											"pm.test(\"Returned number of Related Persons is 17\", () =>{",
											"    pm.expect(patient().getTotalNumberOfPatients()).to.eql(17);",
											"});",
											"",
											"response.entry[16].resource.name[0].family",
											"//getRelatdPerson function",
											"function getRelatedPerson(r) {",
											"    for (let person of response.entry) {",
											"        try {",
											"\t\t\tif (person.resource.name[0].family == r.relatedPersonFamily) {",
											"\t\t\t    console.log(person);",
											"\t\t\t\treturn person;",
											"\t\t\t}",
											"            } catch(err) {",
											"                }",
											"        }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7abad4d7-53ed-4f25-9982-5903550322a5",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900013863\");",
											"",
											"//Related Person 1",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-05-07\");",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"Rank1\",\"Rank1\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"RANK1\");",
											"pm.variables.set(\"relatedPersonFamily\", \"Rank1\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"parent\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"pm.variables.set(\"relatedPersontelecomUse\", \"temporary\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-05-07\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"\");",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"visit\");",
											"pm.variables.set(\"relatedPersonRank1\", 1);",
											"",
											"",
											"//Subsequent Related people for this patient",
											"let rank = [",
											"    {relatedPersonRank: 2,",
											"     relatedPersonRelationshipType: \"self\",",
											"     relatedPersonFamily: \"Rank2\"},",
											"     ",
											"    {relatedPersonRank: 3,",
											"     relatedPersonRelationshipType: \"foster parent\",",
											"     relatedPersonFamily: \"Rank3\"},",
											"     ",
											"    {relatedPersonRank: 4,",
											"     relatedPersonRelationshipType: \"sister\",",
											"     relatedPersonFamily: \"Rank4\"},",
											"     ",
											"    {relatedPersonRank: 5,",
											"     relatedPersonRelationshipType: \"spouse\",",
											"     relatedPersonFamily: \"Rank5\"},  ",
											"",
											"    {relatedPersonRank: 6,",
											"     relatedPersonRelationshipType: \"step parent\",",
											"     relatedPersonFamily: \"Rank6\"},  ",
											"     ",
											"    {relatedPersonRank: 7,",
											"     relatedPersonRelationshipType: \"not known\",",
											"     relatedPersonFamily: \"Rank7\"},  ",
											"    ",
											"    {relatedPersonRank: 8,",
											"     relatedPersonRelationshipType: \"guardian\",",
											"     relatedPersonFamily: \"Rank8\"},",
											"     ",
											"    {relatedPersonRank: 9,",
											"     relatedPersonRelationshipType: \"polygamous partner\",",
											"     relatedPersonFamily: \"Rank9\"},",
											"     ",
											"    {relatedPersonRank: 10,",
											"     relatedPersonRelationshipType: \"dependant\",",
											"     relatedPersonFamily: \"Rank10\"},",
											"",
											"    {relatedPersonRank: 11,",
											"     relatedPersonRelationshipType: \"nondependant\",",
											"     relatedPersonFamily: \"Rank11\"},",
											"     ",
											"    {relatedPersonRank: 12,",
											"     relatedPersonRelationshipType: \"proxy contact\",",
											"     relatedPersonFamily: \"Rank12\"},",
											"     ",
											"    {relatedPersonRank: 13,",
											"    relatedPersonRelationshipType: \"proxy communication\",",
											"    relatedPersonFamily: \"Rank13\"},",
											"     ",
											"    {relatedPersonRank: 14,",
											"    relatedPersonRelationshipType: \"proxy contact communication\",",
											"    relatedPersonFamily: \"Rank14\"},",
											"     ",
											"    {relatedPersonRank: 15,",
											"    relatedPersonRelationshipType: \"carer\",",
											"    relatedPersonFamily: \"Rank15\"},",
											" ",
											"    {relatedPersonRank: 16,",
											"    relatedPersonRelationshipType: \"not specified\",",
											"    relatedPersonFamily: \"Rank16\"},",
											"    ",
											"    {relatedPersonRelationshipType: \"not specified\",",
											"    relatedPersonFamily: \"No Rank\"},",
											"];",
											"pm.variables.set('rank', rank);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  where it has not been set\n* Related Person PreferredContactMethod Extension - where it has been set to \"Visit\"\n* Related Person PreferredContactTimes Extension - where it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - where it has not been set\n* Related Person Language Extension - where it has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"parent\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom\n\nThis also tests:\n\n* where there are mora than 1 related persons for the Patient, all the related persons are returned\n* the remainder of the Relationship types; self, foster parent, sister, spouse, step parent, not known\n* where get related person by (related person) object id is triggered, then only that related person is returned for the given patient"
							},
							"response": []
						},
						{
							"name": "Related Person Error Responses",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b50e5c63-7657-461b-b876-d13b2a224bba",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900006360\"); ",
											"",
											"/*Create dataSets for testing 'Retrieve Patient' Error Exceptions scenarios and assign the \"scenario\" array to a variable to be used in Test*/ ",
											"  ",
											"   let scenario = [",
											"       {desc: \"INVALID_NHS_NUMBER - invalid check digit\", ",
											"        nhs_id: \"9000000000\", ",
											"        responseStatus: 400, ",
											"        responseIssueCode: \"value\", ",
											"        responseSeverity: \"error\", ",
											"        responseCode: \"INVALID_RESOURCE_ID\", ",
											"        responseDisplay: \"Resource Id is invalid\"}",
											"        ",
											"        // This is a bug and has been raised",
											"      //  {desc: \"Patient has no Related Persons associated\", ",
											"      //   nhs_id: \"5900006360\", ",
											"      //   responseStatus: 404, ",
											"      //   responseIssueCode: \"not-found\", ",
											"      //   responseSeverity: \"information\", ",
											"      //   responseCode: \"RESOURCE_NOT_FOUND\", ",
											"      //   responseDisplay: \"Resource not found\"}",
											"       ]",
											"       ",
											"    pm.variables.set('scenario', scenario); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "043491d7-f2b3-4554-b40b-6135897a352d",
										"exec": [
											"/*assign local scenario variable from \"scenario\" variable set in prerequisite script and also assign header variables from variables*/\r",
											"\r",
											"let scenario = pm.variables.get('scenario');\r",
											"let asidHeader = pm.variables.get(\"asidHeader\");\r",
											"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
											"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
											"let authorization = pm.environment.get(\"authorizationHeader\");\r",
											"\r",
											"/*for each scenario dataSet loop the Related People Patient service and ensure the correct Error Reponse is returned for each scenario*/   \r",
											"\r",
											"  scenario.forEach(s => {\r",
											"    console.log(\"scenario under test is: \" + s.desc);\r",
											"\r",
											"   pm.sendRequest({\r",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + s.nhs_id + \"/RelatedPerson\",\r",
											"        method: 'GET',\r",
											"        header: { asidHeader, sessionURIDHeader, identityUUIDHeader, authorization }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        let response = res.json();\r",
											"        pm.test('The correct error response has been returned for: ' + s.desc, () => {\r",
											"            pm.expect(res.code).to.equal(s.responseStatus);\r",
											"            pm.expect(response.issue[0].details.coding[0].display).to.equal(s.responseDisplay);\r",
											"            pm.expect(response.issue[0].details.coding[0].code).to.equal(s.responseCode);\r",
											"            pm.expect(response.issue[0].severity).to.equal(s.responseSeverity);\r",
											"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
											"            \r",
											"        })\r",
											"    })\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that where a Patient does not have a Related person and appropriate error response is returned."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a16b8dea-912b-49ce-935c-b0eb3fc1f0e8",
				"type": "text/javascript",
				"exec": [
					"console.log('Running against environment ' + pm.environment.get('environment'));",
					"",
					"// These are the headers for the pm.sendRequest calls",
					"var Header = require('postman-collection').Header;",
					"",
					"pm.environment.set(\"asidHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-asid-header\"),",
					"    value: pm.environment.get(\"from_asid\")",
					"}));",
					"",
					"pm.environment.set(\"sessionURIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-session-urid-header\"),",
					"    value: '1234567890'",
					"}));",
					"",
					"pm.environment.set(\"identityUUIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-identity-uuid-header\"),",
					"    value: pm.environment.get(\"user_id\")",
					"}));",
					"",
					"pm.environment.set(\"authorizationHeader\", new Header({",
					"    key: 'Authorization',",
					"    value: 'Bearer ' + pm.globals.get(\"token\")",
					"}));",
					"",
					"",
					"// When running against apigee, there are a set of headers which we don't want to pass in.",
					"if (pm.environment.get('environment').toLowerCase().includes('api.service.nhs.uk')) {",
					"    console.log(\"Removing headers when running via apigee\");",
					"    pm.request.headers.remove('{{nhsd-asid-header}}');",
					"    pm.request.headers.remove('{{nhsd-identity-uuid-header}}');",
					"    pm.request.headers.remove('NHSD-Identity-JWT');",
					"",
					"    pm.environment.set(\"asidHeader\", undefined);",
					"    pm.environment.set(\"identityUUIDHeader\", undefined);",
					"",
					"    console.log(\"Adding Authorization header\");",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + pm.globals.get(\"token\")",
					"    });",
					"",
					"    pm.environment.set('skipTest', true);",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "42ba94e3-41d7-4988-b744-07267d30a96b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "d9a54d7d-4fbd-45f5-9cef-c85e3ecf0cfd",
			"key": "metaVersion",
			"value": "173"
		}
	],
	"protocolProfileBehavior": {}
}